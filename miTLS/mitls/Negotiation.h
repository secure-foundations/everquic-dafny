/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: D:\everest\kremlin\_build\src\Kremlin.native -minimal -add-include "kremlib.h" -fnoanonymous-unions -warn-error -9-7-6@4-14-15 -fsopts --debug,yes -verbose -library EverCrypt,EverCrypt.*,Hacl.*,Interop_assumptions,Check_sha_stdcall,Sha_update_bytes_stdcall,Check_aesni_stdcall -drop MonotoneMap -drop MonotoneMapNonDep -drop FStar.Tactics.\* -drop FStar.Tactics -drop Crypto.AEAD.\* -drop Crypto.HKDF -drop Crypto.HMAC -add-include "hacks.h" -add-include "kremlin/internal/compat.h" -bundle LowParse.\*,LowParseWrappers[rename=LowParse] -bundle Format.\* -bundle EverCrypt=EverCrypt,EverCrypt.\* -bundle FStar.\*,LowStar.\*,C,C.\*[rename=Mitls_Kremlib] -bundle Parsers.\* -bundle Spec.\* -bundle Meta.\* -bundle Lib.*[rename=Hacl_Lib] -bundle Hacl.\* -bundle KDF.\*,KDF,Idx,IV,Pkg,Pkg.\*[rename=Pkg] -bundle TLSConstants=TLSConstants,QD.TLS_protocolVersion,List.Helpers -bundle Hashing=Hashing.Spec,Hashing,Hashing.CRF,HMAC,HKDF,HMAC.UFCMA -bundle Old.Handshake=Old.HMAC.UFCMA,Old.Epochs,Old.KeySchedule,Old.Handshake -bundle StatefulLHAE=AEAD_GCM,LHAEPlain,StatefulPlain,StatefulLHAE -bundle StreamAE=StreamPlain,StreamAE -bundle CommonDH=TLS.Curve25519,DHGroup,ECGroup,CommonDH -bundle Content=Content,DataStream -bundle Record=Record,StAE,Transport,StreamDeltas -bundle PMS=PMS,RSAKey,TLSPRF -bundle Crypto.Plain=Buffer.Utils,Crypto.Indexing,Crypto.Plain,Crypto.Symmetric.Bytes -bundle Flags=DebugFlags,Flags,Flag,TLSInfoFlags -bundle Vale.Stdcalls.*,Vale.Interop,Vale.Interop.*,Vale.Wrapper.X64.*[rename=Vale] -bundle Vale.Inline.X64.*[rename=Vale_Inline] -bundle Vale.*[rename=Unused2] -ldopts -L,D:/everest/MLCrypto/openssl,-lcrypto,-lssl extract/Kremlin/FStar_Pervasives_Native.krml extract/Kremlin/FStar_Pervasives.krml extract/Kremlin/FStar_Squash.krml extract/Kremlin/FStar_Classical.krml extract/Kremlin/FStar_Preorder.krml extract/Kremlin/FStar_Calc.krml extract/Kremlin/FStar_Mul.krml extract/Kremlin/FStar_Math_Lib.krml extract/Kremlin/FStar_Math_Lemmas.krml extract/Kremlin/FStar_StrongExcludedMiddle.krml extract/Kremlin/FStar_FunctionalExtensionality.krml extract/Kremlin/FStar_List_Tot_Base.krml extract/Kremlin/FStar_List_Tot_Properties.krml extract/Kremlin/FStar_List_Tot.krml extract/Kremlin/FStar_Seq_Base.krml extract/Kremlin/FStar_Seq_Properties.krml extract/Kremlin/FStar_Seq.krml extract/Kremlin/FStar_BitVector.krml extract/Kremlin/FStar_UInt.krml extract/Kremlin/FStar_UInt32.krml extract/Kremlin/FStar_UInt8.krml extract/Kremlin/FStar_Exn.krml extract/Kremlin/FStar_Set.krml extract/Kremlin/FStar_Monotonic_Witnessed.krml extract/Kremlin/FStar_Ghost.krml extract/Kremlin/FStar_ErasedLogic.krml extract/Kremlin/FStar_PropositionalExtensionality.krml extract/Kremlin/FStar_PredicateExtensionality.krml extract/Kremlin/FStar_TSet.krml extract/Kremlin/FStar_Monotonic_Heap.krml extract/Kremlin/FStar_Heap.krml extract/Kremlin/FStar_ST.krml extract/Kremlin/FStar_All.krml extract/Kremlin/Lib_LoopCombinators.krml extract/Kremlin/FStar_Int.krml extract/Kremlin/FStar_Int64.krml extract/Kremlin/FStar_Int63.krml extract/Kremlin/FStar_Int32.krml extract/Kremlin/FStar_Int16.krml extract/Kremlin/FStar_Int8.krml extract/Kremlin/FStar_UInt64.krml extract/Kremlin/FStar_UInt63.krml extract/Kremlin/FStar_UInt16.krml extract/Kremlin/FStar_Int_Cast.krml extract/Kremlin/FStar_UInt128.krml extract/Kremlin/FStar_Int_Cast_Full.krml extract/Kremlin/FStar_Int128.krml extract/Kremlin/Lib_IntTypes.krml extract/Kremlin/Lib_RawIntTypes.krml extract/Kremlin/Lib_Sequence.krml extract/Kremlin/Lib_ByteSequence.krml extract/Kremlin/Spec_Chacha20.krml extract/Kremlin/Meta_Attribute.krml extract/Kremlin/FStar_Map.krml extract/Kremlin/FStar_Monotonic_HyperHeap.krml extract/Kremlin/FStar_Monotonic_HyperStack.krml extract/Kremlin/FStar_HyperStack.krml extract/Kremlin/FStar_HyperStack_ST.krml extract/Kremlin/FStar_Universe.krml extract/Kremlin/FStar_GSet.krml extract/Kremlin/FStar_ModifiesGen.krml extract/Kremlin/FStar_Range.krml extract/Kremlin/FStar_Reflection_Types.krml extract/Kremlin/FStar_Tactics_Types.krml extract/Kremlin/FStar_Tactics_Result.krml extract/Kremlin/FStar_Tactics_Effect.krml extract/Kremlin/FStar_Reflection_Data.krml extract/Kremlin/FStar_Tactics_Builtins.krml extract/Kremlin/FStar_Reflection_Const.krml extract/Kremlin/FStar_Char.krml extract/Kremlin/FStar_List.krml extract/Kremlin/FStar_String.krml extract/Kremlin/FStar_Order.krml extract/Kremlin/FStar_Reflection_Basic.krml extract/Kremlin/FStar_Reflection_Derived.krml extract/Kremlin/FStar_Reflection_Derived_Lemmas.krml extract/Kremlin/FStar_Reflection.krml extract/Kremlin/FStar_Tactics_SyntaxHelpers.krml extract/Kremlin/FStar_Tactics_Util.krml extract/Kremlin/FStar_Reflection_Formula.krml extract/Kremlin/FStar_Tactics_Derived.krml extract/Kremlin/FStar_Tactics_Logic.krml extract/Kremlin/FStar_Tactics.krml extract/Kremlin/FStar_BigOps.krml extract/Kremlin/LowStar_Monotonic_Buffer.krml extract/Kremlin/LowStar_Buffer.krml extract/Kremlin/LowStar_BufferOps.krml extract/Kremlin/Spec_Loops.krml extract/Kremlin/C_Loops.krml extract/Kremlin/Lib_Loops.krml extract/Kremlin/FStar_Endianness.krml extract/Kremlin/LowStar_Endianness.krml extract/Kremlin/LowStar_ImmutableBuffer.krml extract/Kremlin/Lib_Buffer.krml extract/Kremlin/Lib_ByteBuffer.krml extract/Kremlin/FStar_HyperStack_All.krml extract/Kremlin/Lib_IntVector_Intrinsics.krml extract/Kremlin/Spec_GaloisField.krml extract/Kremlin/Spec_AES.krml extract/Kremlin/Lib_IntVector.krml extract/Kremlin/Hacl_Spec_Chacha20_Vec.krml extract/Kremlin/Hacl_Spec_Chacha20_Lemmas.krml extract/Kremlin/Lib_Sequence_Lemmas.krml extract/Kremlin/Hacl_Spec_Chacha20_Equiv.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32xN.krml extract/Kremlin/Hacl_Impl_Chacha20_Vec.krml extract/Kremlin/Vale_Lib_Seqs_s.krml extract/Kremlin/Vale_Def_Words_s.krml extract/Kremlin/Vale_Def_Words_Four_s.krml extract/Kremlin/Vale_Def_Words_Two_s.krml extract/Kremlin/Vale_Def_Words_Seq_s.krml extract/Kremlin/Vale_Def_Opaque_s.krml extract/Kremlin/Vale_Def_Types_s.krml extract/Kremlin/Vale_X64_Machine_s.krml extract/Kremlin/Vale_Lib_Map16.krml extract/Kremlin/Vale_Def_Prop_s.krml extract/Kremlin/Vale_X64_Flags.krml extract/Kremlin/Vale_X64_CPU_Features_s.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_internal.krml extract/Kremlin/Vale_Lib_Meta.krml extract/Kremlin/Vale_Def_Words_Two.krml extract/Kremlin/Vale_Lib_Seqs.krml extract/Kremlin/Vale_Def_TypesNative_s.krml extract/Kremlin/Vale_Arch_TypesNative.krml extract/Kremlin/Vale_Def_Words_Seq.krml extract/Kremlin/Vale_Arch_Types.krml extract/Kremlin/Vale_Curve25519_Fast_defs.krml extract/Kremlin/FStar_Algebra_CommMonoid.krml extract/Kremlin/FStar_Tactics_CanonCommSemiring.krml extract/Kremlin/Vale_Curve25519_FastUtil_helpers.krml extract/Kremlin/Vale_Curve25519_FastHybrid_helpers.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_external.krml extract/Kremlin/Vale_X64_Regs.krml extract/Kremlin/FStar_Float.krml extract/Kremlin/FStar_IO.krml extract/Kremlin/Vale_Def_PossiblyMonad.krml extract/Kremlin/LowStar_BufferView_Down.krml extract/Kremlin/LowStar_BufferView_Up.krml extract/Kremlin/Vale_Interop_Views.krml extract/Kremlin/FStar_Option.krml extract/Kremlin/Vale_Lib_Set.krml extract/Kremlin/Vale_X64_Instruction_s.krml extract/Kremlin/Vale_X64_Bytes_Code_s.krml extract/Kremlin/Vale_AES_AES_s.krml extract/Kremlin/Vale_Math_Poly2_Defs_s.krml extract/Kremlin/Vale_Math_Poly2_s.krml extract/Kremlin/Vale_Math_Poly2_Bits_s.krml extract/Kremlin/Spec_Hash_Definitions.krml extract/Kremlin/Spec_Hash_Lemmas0.krml extract/Kremlin/Spec_Hash_PadFinish.krml extract/Kremlin/Spec_SHA2_Constants.krml extract/Kremlin/Spec_SHA2.krml extract/Kremlin/Vale_X64_CryptoInstructions_s.krml extract/Kremlin/Vale_X64_Instructions_s.krml extract/Kremlin/Vale_Arch_HeapTypes_s.krml extract/Kremlin/Vale_Interop_Types.krml extract/Kremlin/Vale_Arch_MachineHeap_s.krml extract/Kremlin/Vale_Interop_Heap_s.krml extract/Kremlin/LowStar_Modifies.krml extract/Kremlin/LowStar_ModifiesPat.krml extract/Kremlin/LowStar_BufferView.krml extract/Kremlin/Vale_Lib_BufferViewHelpers.krml extract/Kremlin/Vale_Interop.krml extract/Kremlin/Vale_Arch_HeapImpl.krml extract/Kremlin/Vale_Arch_Heap.krml extract/Kremlin/Vale_X64_Machine_Semantics_s.krml extract/Kremlin/Vale_Interop_Base.krml extract/Kremlin/Vale_X64_Memory.krml extract/Kremlin/Vale_Arch_MachineHeap.krml extract/Kremlin/Vale_X64_Stack_i.krml extract/Kremlin/Vale_X64_Stack_Sems.krml extract/Kremlin/Vale_X64_BufferViewStore.krml extract/Kremlin/Vale_X64_Memory_Sems.krml extract/Kremlin/Vale_X64_State.krml extract/Kremlin/Vale_X64_StateLemmas.krml extract/Kremlin/Vale_X64_Lemmas.krml extract/Kremlin/Vale_X64_Print_s.krml extract/Kremlin/Vale_X64_Decls.krml extract/Kremlin/Vale_X64_QuickCode.krml extract/Kremlin/Vale_X64_QuickCodes.krml extract/Kremlin/Vale_X64_Taint_Semantics.krml extract/Kremlin/Vale_X64_InsLemmas.krml extract/Kremlin/Vale_X64_InsBasic.krml extract/Kremlin/Vale_X64_InsMem.krml extract/Kremlin/Vale_X64_InsVector.krml extract/Kremlin/Vale_X64_InsStack.krml extract/Kremlin/Vale_Curve25519_X64_FastHybrid.krml extract/Kremlin/Vale_Bignum_Defs.krml extract/Kremlin/Vale_Bignum_X64.krml extract/Kremlin/Vale_Curve25519_FastSqr_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastSqr.krml extract/Kremlin/Vale_Curve25519_FastMul_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastMul.krml extract/Kremlin/Vale_Curve25519_X64_FastWide.krml extract/Kremlin/Vale_Curve25519_X64_FastUtil.krml extract/Kremlin/Vale_X64_MemoryAdapters.krml extract/Kremlin/Vale_Interop_Assumptions.krml extract/Kremlin/Vale_Interop_X64.krml extract/Kremlin/Vale_AsLowStar_ValeSig.krml extract/Kremlin/Vale_AsLowStar_LowStarSig.krml extract/Kremlin/Vale_AsLowStar_MemoryHelpers.krml extract/Kremlin/Vale_AsLowStar_Wrapper.krml extract/Kremlin/Vale_Stdcalls_X64_Fadd.krml extract/Kremlin/Vale_Wrapper_X64_Fadd.krml extract/Kremlin/Spec_SHA1.krml extract/Kremlin/Spec_MD5.krml extract/Kremlin/Spec_Agile_Hash.krml extract/Kremlin/Spec_Hash_Incremental.krml extract/Kremlin/Spec_Hash_Lemmas.krml extract/Kremlin/FStar_Kremlin_Endianness.krml extract/Kremlin/Hacl_Hash_Lemmas.krml extract/Kremlin/Hacl_Hash_Definitions.krml extract/Kremlin/Hacl_Hash_PadFinish.krml extract/Kremlin/Hacl_Hash_MD.krml extract/Kremlin/Spec_SHA2_Lemmas.krml extract/Kremlin/Vale_X64_Stack.krml extract/Kremlin/Vale_SHA_SHA_helpers.krml extract/Kremlin/Vale_X64_InsSha.krml extract/Kremlin/Vale_SHA_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Sha.krml extract/Kremlin/FStar_BV.krml extract/Kremlin/FStar_Reflection_Arith.krml extract/Kremlin/FStar_Tactics_BV.krml extract/Kremlin/Vale_Lib_Bv_s.krml extract/Kremlin/Vale_Math_Bits.krml extract/Kremlin/Vale_Lib_Tactics.krml extract/Kremlin/Vale_Poly1305_Bitvectors.krml extract/Kremlin/Vale_Math_Lemmas_Int.krml extract/Kremlin/FStar_Tactics_Canon.krml extract/Kremlin/Vale_Poly1305_Spec_s.krml extract/Kremlin/Vale_Poly1305_Math.krml extract/Kremlin/Vale_Poly1305_Util.krml extract/Kremlin/Vale_Poly1305_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Poly.krml extract/Kremlin/Vale_Wrapper_X64_Poly.krml extract/Kremlin/Vale_Arch_BufferFriend.krml extract/Kremlin/Vale_SHA_Simplify_Sha.krml extract/Kremlin/Vale_Wrapper_X64_Sha.krml extract/Kremlin/Hacl_Hash_Core_SHA2_Constants.krml extract/Kremlin/Hacl_Hash_Core_SHA2.krml extract/Kremlin/Hacl_Hash_SHA2.krml extract/Kremlin/Hacl_Hash_Core_SHA1.krml extract/Kremlin/Hacl_Hash_SHA1.krml extract/Kremlin/Hacl_Hash_Core_MD5.krml extract/Kremlin/Hacl_Hash_MD5.krml extract/Kremlin/C.krml extract/Kremlin/C_String.krml extract/Kremlin/C_Failure.krml extract/Kremlin/FStar_Int31.krml extract/Kremlin/FStar_UInt31.krml extract/Kremlin/FStar_Integers.krml extract/Kremlin/EverCrypt_StaticConfig.krml extract/Kremlin/EverCrypt_TargetConfig.krml extract/Kremlin/Vale_Lib_Basic.krml extract/Kremlin/Vale_Lib_X64_Cpuid.krml extract/Kremlin/Vale_Lib_X64_Cpuidstdcall.krml extract/Kremlin/Vale_Stdcalls_X64_Cpuid.krml extract/Kremlin/Vale_Wrapper_X64_Cpuid.krml extract/Kremlin/EverCrypt_AutoConfig2.krml extract/Kremlin/EverCrypt_Helpers.krml extract/Kremlin/EverCrypt_Hash.krml extract/Kremlin/Spec_Agile_HMAC.krml extract/Kremlin/Hacl_HMAC.krml extract/Kremlin/EverCrypt_HMAC.krml extract/Kremlin/Declassify.krml extract/Kremlin/FStar_Bytes.krml extract/Kremlin/Hashing_Spec.krml extract/Kremlin/LowParse_Bytes32.krml extract/Kremlin/LowParse_Bytes.krml extract/Kremlin/LowParse_Spec_Base.krml extract/Kremlin/LowParse_SLow_Base.krml extract/Kremlin/LowParse_Spec_Option.krml extract/Kremlin/LowParse_SLow_Option.krml extract/Kremlin/LowParse_Spec_Combinators.krml extract/Kremlin/LowParse_Spec_IfThenElse.krml extract/Kremlin/LowParse_SLow_Combinators.krml extract/Kremlin/LowParse_Spec_List.krml extract/Kremlin/LowParse_SLow_List.krml extract/Kremlin/Spec_Curve25519_Lemmas.krml extract/Kremlin/Spec_Curve25519.krml extract/Kremlin/Hacl_Spec_Curve25519_AddAndDouble.krml extract/Kremlin/Hacl_Impl_Curve25519_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Core.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields_Core.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64.krml extract/Kremlin/Hacl_Impl_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields.krml extract/Kremlin/Hacl_Impl_Curve25519_AddAndDouble.krml extract/Kremlin/Spec_Poly1305.krml extract/Kremlin/Hacl_Spec_Poly1305_Vec.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Spec_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Equiv.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_256.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_128.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_32.krml extract/Kremlin/Hacl_Impl_Poly1305_Fields.krml extract/Kremlin/Hacl_Impl_Poly1305.krml extract/Kremlin/Spec_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305_PolyCore.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305.krml extract/Kremlin/FStar_List_Pure_Base.krml extract/Kremlin/FStar_List_Pure_Properties.krml extract/Kremlin/FStar_List_Pure.krml extract/Kremlin/Meta_Interface.krml extract/Kremlin/Hacl_Meta_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32.krml extract/Kremlin/Hacl_Impl_Chacha20.krml extract/Kremlin/Hacl_Chacha20.krml extract/Kremlin/Hacl_Meta_Poly1305.krml extract/Kremlin/Hacl_Poly1305_32.krml extract/Kremlin/Hacl_Chacha20Poly1305_32.krml extract/Kremlin/FStar_Dyn.krml extract/Kremlin/LowStar_Failure.krml extract/Kremlin/EverCrypt_Vale.krml extract/Kremlin/EverCrypt_Specs.krml extract/Kremlin/EverCrypt_OpenSSL.krml extract/Kremlin/EverCrypt_Hacl.krml extract/Kremlin/EverCrypt_BCrypt.krml extract/Kremlin/EverCrypt_Cipher.krml extract/Kremlin/Hacl_Spec_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Generic.krml extract/Kremlin/Hacl_Meta_Curve25519.krml extract/Kremlin/Hacl_Curve25519_51.krml extract/Kremlin/Vale_Stdcalls_X64_Fswap.krml extract/Kremlin/Vale_Wrapper_X64_Fswap.krml extract/Kremlin/Vale_X64_Print_Inline_s.krml extract/Kremlin/Vale_Inline_X64_Fswap_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsqr.krml extract/Kremlin/Vale_Wrapper_X64_Fsqr.krml extract/Kremlin/Vale_Inline_X64_Fsqr_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fmul.krml extract/Kremlin/Vale_Wrapper_X64_Fmul.krml extract/Kremlin/Vale_Inline_X64_Fmul_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsub.krml extract/Kremlin/Vale_Wrapper_X64_Fsub.krml extract/Kremlin/Vale_Inline_X64_Fadd_inline.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64_Vale.krml extract/Kremlin/Hacl_Curve25519_64.krml extract/Kremlin/EverCrypt_Curve25519.krml extract/Kremlin/Hacl_Poly1305_128.krml extract/Kremlin/Hacl_Poly1305_256.krml extract/Kremlin/Vale_Poly1305_Equiv.krml extract/Kremlin/Vale_Poly1305_CallingFromLowStar.krml extract/Kremlin/EverCrypt_Poly1305.krml extract/Kremlin/Lib_Memzero.krml extract/Kremlin/Spec_HMAC_DRBG.krml extract/Kremlin/Hacl_HMAC_DRBG.krml extract/Kremlin/Lib_RandomBuffer_System.krml extract/Kremlin/EverCrypt_DRBG.krml extract/Kremlin/Spec_Agile_HKDF.krml extract/Kremlin/Hacl_HKDF.krml extract/Kremlin/EverCrypt_HKDF.krml extract/Kremlin/EverCrypt.krml extract/Kremlin/FStar_Printf.krml extract/Kremlin/FStar_Error.krml extract/Kremlin/FStar_Tcp.krml extract/Kremlin/LowParse_Spec_FLData.krml extract/Kremlin/LowParse_Math.krml extract/Kremlin/LowParse_Slice.krml extract/Kremlin/LowParse_Low_Base.krml extract/Kremlin/LowParse_Low_Combinators.krml extract/Kremlin/LowParse_Low_FLData.krml extract/Kremlin/LowParse_Spec_Seq.krml extract/Kremlin/LowParse_Spec_Int.krml extract/Kremlin/LowParse_Spec_BoundedInt.krml extract/Kremlin/LowParse_Low_Endianness.krml extract/Kremlin/LowParse_BitFields.krml extract/Kremlin/LowParse_Endianness.krml extract/Kremlin/LowParse_Endianness_BitFields.krml extract/Kremlin/LowParse_Low_BoundedInt.krml extract/Kremlin/LowParse_Spec_SeqBytes_Base.krml extract/Kremlin/LowParse_Spec_DER.krml extract/Kremlin/LowParse_Spec_BCVLI.krml extract/Kremlin/LowParse_Spec_AllIntegers.krml extract/Kremlin/LowParse_Spec_VLData.krml extract/Kremlin/LowParse_Low_VLData.krml extract/Kremlin/LowParse_Spec_VLGen.krml extract/Kremlin/LowParse_Low_VLGen.krml extract/Kremlin/LowParse_Low_Int.krml extract/Kremlin/LowParse_Low_DER.krml extract/Kremlin/LowParse_Low_BCVLI.krml extract/Kremlin/LowParse_Low_List.krml extract/Kremlin/LowParse_Spec_Array.krml extract/Kremlin/LowParse_Spec_VCList.krml extract/Kremlin/LowParse_Low_VCList.krml extract/Kremlin/LowParse_Low_IfThenElse.krml extract/Kremlin/LowParse_TacLib.krml extract/Kremlin/LowParse_Spec_Enum.krml extract/Kremlin/LowParse_Spec_Sum.krml extract/Kremlin/LowParse_Low_Enum.krml extract/Kremlin/LowParse_Low_Sum.krml extract/Kremlin/LowParse_Low_Tac_Sum.krml extract/Kremlin/LowParse_Low_Option.krml extract/Kremlin/LowParse_Spec_Bytes.krml extract/Kremlin/LowParse_Low_Bytes.krml extract/Kremlin/LowParse_Low_Array.krml extract/Kremlin/LowParse_Low.krml extract/Kremlin/LowParse_SLow_FLData.krml extract/Kremlin/LowParse_SLow_VLGen.krml extract/Kremlin/LowParse_Spec_Endianness.krml extract/Kremlin/LowParse_Spec_Endianness_Instances.krml extract/Kremlin/LowParse_SLow_Endianness.krml extract/Kremlin/LowParse_SLow_BoundedInt.krml extract/Kremlin/LowParse_SLow_Int.krml extract/Kremlin/LowParse_SLow_DER.krml extract/Kremlin/LowParse_SLow_BCVLI.krml extract/Kremlin/LowParse_SLow_VCList.krml extract/Kremlin/LowParse_SLow_IfThenElse.krml extract/Kremlin/LowParse_SLow_Enum.krml extract/Kremlin/LowParse_SLow_Sum.krml extract/Kremlin/LowParse_SLow_Tac_Enum.krml extract/Kremlin/LowParse_SLow_Tac_Sum.krml extract/Kremlin/LowParse_SLow_VLData.krml extract/Kremlin/LowParse_SLow_Bytes.krml extract/Kremlin/LowParse_SLow_Array.krml extract/Kremlin/LowParse_Spec_Tac_Combinators.krml extract/Kremlin/LowParse_SLow.krml extract/Kremlin/Parsers_AlertDescription.krml extract/Kremlin/Parsers_AlertLevel.krml extract/Kremlin/Parsers_Alert.krml extract/Kremlin/TLSError.krml extract/Kremlin/Parsers_NamedGroup.krml extract/Kremlin/Format_Constants.krml extract/Kremlin/Format_UncompressedPointRepresentation.krml extract/Kremlin/Format_KeyShareEntry.krml extract/Kremlin/Flags.krml extract/Kremlin/Parsers_ECCurveType.krml extract/Kremlin/DebugFlags.krml extract/Kremlin/FStar_DependentMap.krml extract/Kremlin/FStar_Monotonic_DependentMap.krml extract/Kremlin/Mem.krml extract/Kremlin/Random.krml extract/Kremlin/TLS_Curve25519.krml extract/Kremlin/Parse.krml extract/Kremlin/ECGroup.krml extract/Kremlin/DHGroup.krml extract/Kremlin/Parsers_NamedGroupList.krml extract/Kremlin/CommonDH.krml extract/Kremlin/FFICallbacks.krml extract/Kremlin/Parsers_CompressionMethod.krml extract/Kremlin/Parsers_SignatureScheme.krml extract/Kremlin/Parsers_SignatureSchemeList.krml extract/Kremlin/LowParseWrappers.krml extract/Kremlin/Parsers_CipherSuite.krml extract/Kremlin/CipherSuite.krml extract/Kremlin/Parsers_ProtocolVersion.krml extract/Kremlin/TLSConstants.krml extract/Kremlin/HMAC.krml extract/Kremlin/RSAKey.krml extract/Kremlin/PMS.krml extract/Kremlin/List_Helpers.krml extract/Kremlin/PSK.krml extract/Kremlin/Extensions.krml extract/Kremlin/Cert.krml extract/Kremlin/TLSInfoFlags.krml extract/Kremlin/FStar_Date.krml extract/Kremlin/Nonce.krml extract/Kremlin/TLSInfo.krml extract/Kremlin/Crypto_Indexing.krml extract/Kremlin/Flag.krml extract/Kremlin/FStar_Old_Endianness.krml extract/Kremlin/FStar_Buffer.krml extract/Kremlin/C_Compat_Loops.krml extract/Kremlin/Buffer_Utils.krml extract/Kremlin/Crypto_Symmetric_Bytes.krml extract/Kremlin/Crypto_Plain.krml extract/Kremlin/AEADProvider.krml extract/Kremlin/Range.krml extract/Kremlin/DataStream.krml extract/Kremlin/Alert.krml extract/Kremlin/Content.krml extract/Kremlin/StreamPlain.krml extract/Kremlin/Hashing.krml extract/Kremlin/TLSPRF.krml extract/Kremlin/Hashing_CRF.krml extract/Kremlin/HandshakeMessages.krml extract/Kremlin/HandshakeLog.krml extract/Kremlin/Parsers_Boolean.krml extract/Kremlin/Parsers_TicketContents13_custom_data.krml extract/Kremlin/Parsers_TicketContents13_nonce.krml extract/Kremlin/Parsers_TicketContents13_rms.krml extract/Kremlin/Parsers_TicketContents13.krml extract/Kremlin/Parsers_TicketContents12_master_secret.krml extract/Kremlin/Parsers_TicketContents12.krml extract/Kremlin/Parsers_TicketVersion.krml extract/Kremlin/Parsers_TicketContents.krml extract/Kremlin/Parsers_TicketContents12_master_secret_Low.krml extract/Kremlin/Parsers_Ticket_Low.krml extract/Kremlin/Ticket.krml extract/Kremlin/Negotiation.krml extract/Kremlin/FStar_Monotonic_Seq.krml extract/Kremlin/StreamAE.krml extract/Kremlin/StatefulPlain.krml extract/Kremlin/LHAEPlain.krml extract/Kremlin/AEAD_GCM.krml extract/Kremlin/StatefulLHAE.krml extract/Kremlin/StAE.krml extract/Kremlin/Old_HMAC_UFCMA.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_context.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_label.krml extract/Kremlin/Parsers_HKDF_HkdfLabel.krml extract/Kremlin/HKDF.krml extract/Kremlin/Old_KeySchedule.krml extract/Kremlin/Old_Epochs.krml extract/Kremlin/FStar_HyperStack_IO.krml extract/Kremlin/StreamDeltas.krml extract/Kremlin/Old_Handshake.krml extract/Kremlin/Transport.krml extract/Kremlin/BufferBytes.krml extract/Kremlin/Record.krml extract/Kremlin/Connection.krml extract/Kremlin/TLS.krml extract/Kremlin/FFI.krml extract/Kremlin/Pkg.krml extract/Kremlin/Idx.krml extract/Kremlin/Model.krml extract/Kremlin/FStar_Test.krml extract/Kremlin/Pkg_Tree.krml extract/Kremlin/KDF.krml extract/Kremlin/QUIC.krml extract/Kremlin/IV.krml extract/Kremlin/KDF_Rekey.krml -tmpdir extract/Kremlin-Library -skip-compilation
  F* version: 1f9505d5
  KreMLin version: 44acff92
 */
#include "kremlib.h"
#include "hacks.h"
#include "kremlin/internal/compat.h"

#ifndef __Negotiation_H
#define __Negotiation_H

#include "Parse.h"
#include "Spec.h"
#include "Parsers.h"
#include "HandshakeLog.h"
#include "Format.h"
#include "EverCrypt.h"
#include "Ticket.h"
#include "Mitls_Kremlib.h"
#include "Cert.h"
#include "PSK.h"
#include "Random.h"
#include "CipherSuite.h"
#include "Prims.h"
#include "TLSInfo.h"
#include "Extensions.h"
#include "CommonDH.h"
#include "HandshakeMessages.h"
#include "Hashing.h"
#include "TLSConstants.h"
#include "TLSError.h"


void Negotiation_discard(bool uu____31);

void Negotiation_print(Prims_string s);

extern void (*Negotiation_trace)(Prims_string x0);

Prims_string Extensions_string_of_extensions____(Prims_list__Extensions_extension_ *l);

Prims_string
Negotiation_string_of_option_extensions(
  FStar_Pervasives_Native_option__Prims_list__Extensions_extension_ o
);

Prims_string Negotiation_string_of_ciphersuite(CipherSuite_cipherSuite_ cs);

Prims_string
Negotiation_string_of_signatureSchemes(
  Prims_list__Parsers_SignatureScheme_signatureScheme *sal
);

Prims_string Negotiation_string_of_ciphersuites(Prims_list__CipherSuite_cipherSuite_ *csl);

Prims_string Negotiation_string_of_namedGroups(Prims_list__Parsers_NamedGroup_namedGroup *ngl);

Prims_string
Negotiation_string_of_ciphersuitenames(Prims_list__Parsers_CipherSuite_cipherSuite *csl);

typedef K___FStar_Bytes_bytes_FStar_Bytes_bytes Negotiation_ri;

#define Negotiation_OfferNothing 0
#define Negotiation_OfferTicket 1
#define Negotiation_OfferSid 2

typedef uint8_t Negotiation_resumption_offer_12_tags;

typedef struct Negotiation_resumption_offer_12_s
{
  Negotiation_resumption_offer_12_tags tag;
  union {
    FStar_Bytes_bytes case_OfferTicket;
    FStar_Bytes_bytes case_OfferSid;
  }
  val;
}
Negotiation_resumption_offer_12;

bool Negotiation_uu___is_OfferNothing(Negotiation_resumption_offer_12 projectee);

bool Negotiation_uu___is_OfferTicket(Negotiation_resumption_offer_12 projectee);

FStar_Bytes_bytes
Negotiation___proj__OfferTicket__item___0(Negotiation_resumption_offer_12 projectee);

bool Negotiation_uu___is_OfferSid(Negotiation_resumption_offer_12 projectee);

FStar_Bytes_bytes
Negotiation___proj__OfferSid__item___0(Negotiation_resumption_offer_12 projectee);

typedef HandshakeMessages_ch Negotiation_offer;

FStar_Pervasives_Native_option__Extensions_extension_
Negotiation_find_client_extension(
  bool (*filter1)(Extensions_extension_ x0),
  HandshakeMessages_ch o
);

bool Extensions_uu___is_E_supported_versions____(Extensions_extension_ projectee);

typedef struct FStar_Pervasives_Native_option__Extensions_protocol_versions_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Extensions_protocol_versions v;
}
FStar_Pervasives_Native_option__Extensions_protocol_versions;

FStar_Pervasives_Native_option__Extensions_protocol_versions
Negotiation_find_supported_versions(HandshakeMessages_ch o);

bool Extensions_uu___is_E_signature_algorithms____(Extensions_extension_ projectee);

FStar_Pervasives_Native_option__Prims_list__Parsers_SignatureScheme_signatureScheme
Negotiation_find_signature_algorithms(HandshakeMessages_ch o);

bool Extensions_uu___is_E_signature_algorithms_cert____(Extensions_extension_ projectee);

FStar_Pervasives_Native_option__Prims_list__Parsers_SignatureScheme_signatureScheme
Negotiation_find_signature_algorithms_cert(HandshakeMessages_ch o);

bool Extensions_uu___is_E_cookie____(Extensions_extension_ projectee);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
Negotiation_find_cookie(HandshakeMessages_ch o);

typedef struct FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_uint32_t_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Prims_list__K___FStar_Bytes_bytes_uint32_t *v;
}
FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_uint32_t;

FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_uint32_t
Negotiation_find_pske(HandshakeMessages_ch o);

bool Extensions_uu___is_E_psk_key_exchange_modes____(Extensions_extension_ projectee);

Prims_list__Extensions_psk_kex
*Negotiation_find_psk_key_exchange_modes(HandshakeMessages_ch o);

bool Extensions_uu___is_E_session_ticket____(Extensions_extension_ projectee);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
Negotiation_find_sessionTicket(HandshakeMessages_ch o);

typedef struct K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int_s
{
  Prims_list__K___FStar_Bytes_bytes_uint32_t *fst;
  Prims_int snd;
}
K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int;

typedef struct
FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int v;
}
FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int;

FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_uint32_t_Prims_int
Negotiation_find_clientPske(HandshakeMessages_ch o);

FStar_Pervasives_Native_option__Prims_int Negotiation_find_serverPske(HandshakeMessages_sh sh);

bool Extensions_uu___is_E_key_share____(Extensions_extension_ projectee);

typedef struct FStar_Pervasives_Native_option__CommonDH_keyShareEntry_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  CommonDH_keyShareEntry v;
}
FStar_Pervasives_Native_option__CommonDH_keyShareEntry;

FStar_Pervasives_Native_option__CommonDH_keyShareEntry
Negotiation_find_serverKeyShare(HandshakeMessages_sh sh);

bool Extensions_uu___is_E_supported_groups____(Extensions_extension_ projectee);

FStar_Pervasives_Native_option__Prims_list__Parsers_NamedGroup_namedGroup
Negotiation_find_supported_groups(HandshakeMessages_ch o);

typedef Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ Negotiation_share;

typedef Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ Negotiation_pre_share;

typedef struct FStar_Pervasives_Native_option__Prims_list__CommonDH_keyShareEntry_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Prims_list__CommonDH_keyShareEntry *v;
}
FStar_Pervasives_Native_option__Prims_list__CommonDH_keyShareEntry;

FStar_Pervasives_Native_option__Prims_list__CommonDH_keyShareEntry
Negotiation_find_key_shares(HandshakeMessages_ch o);

typedef struct Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__s
Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_;

typedef struct Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ hd;
  Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ *tl;
}
Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_;

Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
*Negotiation_gs_of(HandshakeMessages_ch o);

bool Extensions_uu___is_E_early_data____(Extensions_extension_ projectee);

typedef struct FStar_Pervasives_Native_option__FStar_Pervasives_Native_option__uint32_t_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  FStar_Pervasives_Native_option__uint32_t v;
}
FStar_Pervasives_Native_option__FStar_Pervasives_Native_option__uint32_t;

FStar_Pervasives_Native_option__FStar_Pervasives_Native_option__uint32_t
Negotiation_find_early_data(HandshakeMessages_ch o);

typedef struct
K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t_s
{
  HandshakeMessages_hrr fst;
  Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ *snd;
  Prims_list__K___FStar_Bytes_bytes_uint32_t *thd;
}
K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t;

typedef struct
FStar_Pervasives_Native_option__K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t
  v;
}
FStar_Pervasives_Native_option__K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t;

typedef struct
FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ v;
}
FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_;

typedef struct FStar_Pervasives_Native_option__HandshakeMessages_cr_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  HandshakeMessages_cr v;
}
FStar_Pervasives_Native_option__HandshakeMessages_cr;

typedef struct
K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme_s
{
  Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_ *fst;
  Parsers_SignatureScheme_signatureScheme snd;
}
K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme;

typedef struct
FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme
  v;
}
FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme;

typedef struct Negotiation_mode_s
{
  HandshakeMessages_ch n_offer;
  FStar_Pervasives_Native_option__K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t
  n_hrr;
  Parsers_ProtocolVersion_protocolVersion n_protocol_version;
  FStar_Bytes_bytes n_server_random;
  FStar_Bytes_bytes n_sessionID;
  CipherSuite_cipherSuite_ n_cipher_suite;
  FStar_Pervasives_Native_option__Prims_int n_pski;
  FStar_Pervasives_Native_option__Prims_list__Extensions_extension_ n_server_extensions;
  FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
  n_server_share;
  FStar_Pervasives_Native_option__HandshakeMessages_cr n_client_cert_request;
  FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme
  n_server_cert;
  FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
  n_client_share;
}
Negotiation_mode;

bool Negotiation_uu___is_Mode(Negotiation_mode projectee);

HandshakeMessages_ch Negotiation___proj__Mode__item__n_offer(Negotiation_mode projectee);

FStar_Pervasives_Native_option__K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t
Negotiation___proj__Mode__item__n_hrr(Negotiation_mode projectee);

Parsers_ProtocolVersion_protocolVersion
Negotiation___proj__Mode__item__n_protocol_version(Negotiation_mode projectee);

FStar_Bytes_bytes Negotiation___proj__Mode__item__n_server_random(Negotiation_mode projectee);

FStar_Bytes_bytes Negotiation___proj__Mode__item__n_sessionID(Negotiation_mode projectee);

CipherSuite_cipherSuite_
Negotiation___proj__Mode__item__n_cipher_suite(Negotiation_mode projectee);

FStar_Pervasives_Native_option__Prims_int
Negotiation___proj__Mode__item__n_pski(Negotiation_mode projectee);

FStar_Pervasives_Native_option__Prims_list__Extensions_extension_
Negotiation___proj__Mode__item__n_server_extensions(Negotiation_mode projectee);

FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation___proj__Mode__item__n_server_share(Negotiation_mode projectee);

FStar_Pervasives_Native_option__HandshakeMessages_cr
Negotiation___proj__Mode__item__n_client_cert_request(Negotiation_mode projectee);

FStar_Pervasives_Native_option__K___Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__Parsers_SignatureScheme_signatureScheme
Negotiation___proj__Mode__item__n_server_cert(Negotiation_mode projectee);

FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation___proj__Mode__item__n_client_share(Negotiation_mode projectee);

FStar_Pervasives_Native_option__Extensions_extension_
Negotiation_find_server_extension(
  bool (*filter1)(Extensions_extension_ x0),
  Negotiation_mode m
);

bool Negotiation_is_resumption12(Negotiation_mode m);

bool Negotiation_is_cacheable12(Negotiation_mode m);

typedef FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
Negotiation_certNego;

typedef struct
FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension__s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_ *v;
}
FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_;

#define Negotiation_C_Init 0
#define Negotiation_C_Offer 1
#define Negotiation_C_HRR 2
#define Negotiation_C_WaitFinished1 3
#define Negotiation_C_Mode 4
#define Negotiation_C_WaitFinished2 5
#define Negotiation_C_Complete 6
#define Negotiation_S_Init 7
#define Negotiation_S_HRR 8
#define Negotiation_S_ClientHello 9
#define Negotiation_S_Mode 10
#define Negotiation_S_Complete 11

typedef uint8_t Negotiation_negotiationState_tags;

typedef struct Negotiation_negotiationState_s
{
  Negotiation_negotiationState_tags tag;
  union {
    FStar_Bytes_bytes case_C_Init;
    HandshakeMessages_ch case_C_Offer;
    struct 
    {
      HandshakeMessages_ch n_offer;
      K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t
      n_hrr;
    }
    case_C_HRR;
    Negotiation_mode case_C_WaitFinished1;
    Negotiation_mode case_C_Mode;
    struct 
    {
      Negotiation_mode n_mode;
      FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
      n_client_certificate;
    }
    case_C_WaitFinished2;
    struct 
    {
      Negotiation_mode n_mode;
      FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
      n_client_certificate;
    }
    case_C_Complete;
    FStar_Bytes_bytes case_S_Init;
    struct 
    {
      HandshakeMessages_ch n_offer;
      HandshakeMessages_hrr n_hrr;
    }
    case_S_HRR;
    struct 
    {
      Negotiation_mode n_mode;
      FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
      n_selected_cert;
    }
    case_S_ClientHello;
    struct 
    {
      Negotiation_mode n_mode;
      FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
      n_selected_cert;
    }
    case_S_Mode;
    struct 
    {
      Negotiation_mode n_mode;
      FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
      n_client_certificate;
    }
    case_S_Complete;
  }
  val;
}
Negotiation_negotiationState;

bool
Negotiation_uu___is_C_Init(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Bytes_bytes
Negotiation___proj__C_Init__item__n_client_random(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_Offer(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

HandshakeMessages_ch
Negotiation___proj__C_Offer__item__n_offer(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_HRR(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

HandshakeMessages_ch
Negotiation___proj__C_HRR__item__n_offer(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

K___HandshakeMessages_hrr_Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share__Prims_list__K___FStar_Bytes_bytes_uint32_t
Negotiation___proj__C_HRR__item__n_hrr(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_WaitFinished1(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__C_WaitFinished1__item__n_partialmode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_Mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__C_Mode__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_WaitFinished2(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__C_WaitFinished2__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
Negotiation___proj__C_WaitFinished2__item__n_client_certificate(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_C_Complete(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__C_Complete__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
Negotiation___proj__C_Complete__item__n_client_certificate(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_S_Init(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Bytes_bytes
Negotiation___proj__S_Init__item__n_server_random(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_S_HRR(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

HandshakeMessages_ch
Negotiation___proj__S_HRR__item__n_offer(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

HandshakeMessages_hrr
Negotiation___proj__S_HRR__item__n_hrr(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_S_ClientHello(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__S_ClientHello__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
Negotiation___proj__S_ClientHello__item__n_selected_cert(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_S_Mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__S_Mode__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
Negotiation___proj__S_Mode__item__n_selected_cert(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

bool
Negotiation_uu___is_S_Complete(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

Negotiation_mode
Negotiation___proj__S_Complete__item__n_mode(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
Negotiation___proj__S_Complete__item__n_client_certificate(
  TLSConstants_role r,
  TLSConstants_config cfg,
  Negotiation_negotiationState projectee
);

typedef struct K___FStar_Bytes_bytes_Ticket_ticket_s
{
  FStar_Bytes_bytes fst;
  Ticket_ticket snd;
}
K___FStar_Bytes_bytes_Ticket_ticket;

typedef struct FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___FStar_Bytes_bytes_Ticket_ticket v;
}
FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket;

typedef struct Prims_list__K___FStar_Bytes_bytes_Ticket_ticket_s
Prims_list__K___FStar_Bytes_bytes_Ticket_ticket;

typedef struct Prims_list__K___FStar_Bytes_bytes_Ticket_ticket_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  K___FStar_Bytes_bytes_Ticket_ticket hd;
  Prims_list__K___FStar_Bytes_bytes_Ticket_ticket *tl;
}
Prims_list__K___FStar_Bytes_bytes_Ticket_ticket;

typedef struct
K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket_s
{
  FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket fst;
  Prims_list__K___FStar_Bytes_bytes_Ticket_ticket *snd;
}
K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket;

typedef K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
Negotiation_resumeInfo;

typedef struct Negotiation_t_s
{
  TLSConstants_config cfg;
  K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
  resume;
  FStar_Bytes_bytes nonce;
  Negotiation_negotiationState *state;
}
Negotiation_t;

bool Negotiation_uu___is_NS(TLSConstants_role role, Negotiation_t projectee);

TLSConstants_config
Negotiation___proj__NS__item__cfg(TLSConstants_role role, Negotiation_t projectee);

K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
Negotiation___proj__NS__item__resume(TLSConstants_role role, Negotiation_t projectee);

FStar_Bytes_bytes
Negotiation___proj__NS__item__nonce(TLSConstants_role role, Negotiation_t projectee);

Negotiation_negotiationState
*Negotiation___proj__NS__item__state(TLSConstants_role role, Negotiation_t projectee);

FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket
FStar_Pervasives_Native_fst__FStar_Pervasives_Native_option_FStar_Bytes_bytes___Ticket_ticket_Prims_list_FStar_Bytes_bytes___Ticket_ticket(
  K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
  x
);

HandshakeMessages_ch
Negotiation_computeOffer(
  TLSConstants_role r,
  TLSConstants_config cfg,
  FStar_Bytes_bytes nonce,
  FStar_Pervasives_Native_option__CommonDH_keyShare ks,
  K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
  resume,
  uint32_t now1
);

Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
*Negotiation_unseal_tickets(
  Prims_list__K___FStar_Bytes_bytes_Ticket_ticket *acc,
  Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes *l
);

Negotiation_t
Negotiation_create(TLSConstants_role r, TLSConstants_config cfg, FStar_Bytes_bytes nonce);

bool Negotiation_is_server_hrr(TLSConstants_role role, Negotiation_t ns);

Spec_Hash_Definitions_hash_alg Negotiation_hashAlg(Negotiation_mode m);

CipherSuite_kexAlg Negotiation_kexAlg(Negotiation_mode m);

CipherSuite_aeAlg Negotiation_aeAlg(Negotiation_mode m);

bool
__eq__K___Prims_int_FStar_Bytes_bytes(
  K___Prims_int_FStar_Bytes_bytes y,
  K___Prims_int_FStar_Bytes_bytes x
);

bool __eq__TLSConstants_serverName(TLSConstants_serverName y, TLSConstants_serverName x);

bool
__eq__Prims_list__TLSConstants_serverName(
  Prims_list__TLSConstants_serverName *y,
  Prims_list__TLSConstants_serverName *x
);

bool
__eq__Prims_list__Parsers_NamedGroup_namedGroup(
  Prims_list__Parsers_NamedGroup_namedGroup *y,
  Prims_list__Parsers_NamedGroup_namedGroup *x
);

bool
__eq__Prims_list__Parsers_SignatureScheme_signatureScheme(
  Prims_list__Parsers_SignatureScheme_signatureScheme *y,
  Prims_list__Parsers_SignatureScheme_signatureScheme *x
);

bool __eq__DHGroup_ffdhe(DHGroup_ffdhe y, DHGroup_ffdhe x);

bool __eq__DHGroup_params(DHGroup_params y, DHGroup_params x);

bool __eq__DHGroup_group(DHGroup_group y, DHGroup_group x);

bool __eq__EverCrypt_ec_curve(EverCrypt_ec_curve y, EverCrypt_ec_curve x);

bool __eq__CommonDH_group_(CommonDH_group_ y, CommonDH_group_ x);

bool __eq__ECGroup_point(ECGroup_point y, ECGroup_point x);

bool __eq__ECGroup_pre_share(ECGroup_pre_share y, ECGroup_pre_share x);

bool __eq__CommonDH_pre_share_(CommonDH_pre_share_ y, CommonDH_pre_share_ x);

bool __eq__CommonDH_keyShareEntry(CommonDH_keyShareEntry y, CommonDH_keyShareEntry x);

bool
__eq__Prims_list__CommonDH_keyShareEntry(
  Prims_list__CommonDH_keyShareEntry *y,
  Prims_list__CommonDH_keyShareEntry *x
);

bool __eq__CommonDH_keyShare(CommonDH_keyShare y, CommonDH_keyShare x);

bool
__eq__K___FStar_Bytes_bytes_uint32_t(
  K___FStar_Bytes_bytes_uint32_t y,
  K___FStar_Bytes_bytes_uint32_t x
);

bool
__eq__Prims_list__K___FStar_Bytes_bytes_uint32_t(
  Prims_list__K___FStar_Bytes_bytes_uint32_t *y,
  Prims_list__K___FStar_Bytes_bytes_uint32_t *x
);

bool __eq__Extensions_psk(Extensions_psk y, Extensions_psk x);

bool
__eq__FStar_Pervasives_Native_option__uint32_t(
  FStar_Pervasives_Native_option__uint32_t y,
  FStar_Pervasives_Native_option__uint32_t x
);

bool
__eq__Prims_list__Parsers_ProtocolVersion_protocolVersion(
  Prims_list__Parsers_ProtocolVersion_protocolVersion *y,
  Prims_list__Parsers_ProtocolVersion_protocolVersion *x
);

bool
__eq__Extensions_protocol_versions(
  Extensions_protocol_versions y,
  Extensions_protocol_versions x
);

bool __eq__Extensions_psk_kex(Extensions_psk_kex y, Extensions_psk_kex x);

bool
__eq__Prims_list__Extensions_psk_kex(
  Prims_list__Extensions_psk_kex *y,
  Prims_list__Extensions_psk_kex *x
);

bool
__eq__Prims_list__Extensions_point_format(
  Prims_list__Extensions_point_format *y,
  Prims_list__Extensions_point_format *x
);

bool __eq__Extensions_extension_(Extensions_extension_ y, Extensions_extension_ x);

bool Negotiation_emsFlag(Negotiation_mode mode);

FStar_Pervasives_Native_option__CommonDH_group_ Negotiation_chosenGroup(Negotiation_mode mode);

bool
FStar_Pervasives_Native_uu___is_Some__FStar_Pervasives_Native_option_uint32_t(
  FStar_Pervasives_Native_option__FStar_Pervasives_Native_option__uint32_t projectee
);

bool Negotiation_zeroRTToffer(HandshakeMessages_ch o);

bool Negotiation_zeroRTT(Negotiation_mode mode);

bool Negotiation_sendticket_12(Negotiation_mode mode);

bool
FStar_Pervasives_Native_uu___is_Some__FStar_Bytes_bytes(
  FStar_Pervasives_Native_option__FStar_Bytes_bytes projectee
);

bool Negotiation_resume_12(Negotiation_mode mode);

TLSConstants_config Negotiation_local_config(TLSConstants_role role, Negotiation_t ns);

FStar_Bytes_bytes Negotiation_nonce(TLSConstants_role role, Negotiation_t ns);

K___FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_Ticket_ticket_Prims_list__K___FStar_Bytes_bytes_Ticket_ticket
Negotiation_resume(TLSConstants_role role, Negotiation_t ns);

Negotiation_mode Negotiation_getMode(TLSConstants_role role, Negotiation_t ns);

Parsers_ProtocolVersion_protocolVersion
Negotiation_version(TLSConstants_role role, Negotiation_t ns);

bool Negotiation_is_hrr(TLSConstants_role role, Negotiation_t ns);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_HandshakeMessages_signature
Negotiation_sign(TLSConstants_role role, Negotiation_t ns, FStar_Bytes_bytes tbs);

K___FStar_Bytes_bytes_TLSConstants_pskInfo Negotiation_i_psk_info(FStar_Bytes_bytes i1);

HandshakeMessages_ch
Negotiation_client_ClientHello(
  Negotiation_t ns,
  FStar_Pervasives_Native_option__Prims_list__CommonDH_keyShareEntry oks
);

FStar_Pervasives_Native_option__CommonDH_group_
Negotiation_group_of_hrr(HandshakeMessages_hrr hrr);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_HandshakeMessages_ch_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    HandshakeMessages_ch case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_HandshakeMessages_ch;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_HandshakeMessages_ch
TLSError_fatal__HandshakeMessages_ch(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_HandshakeMessages_ch
Negotiation_client_HelloRetryRequest(
  Negotiation_t ns,
  HandshakeMessages_hrr hrr,
  FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Parsers_ProtocolVersion_protocolVersion
Negotiation_offered_versions(
  Parsers_ProtocolVersion_protocolVersion min_pv,
  HandshakeMessages_ch o
);

bool Negotiation_is_client13(HandshakeMessages_ch o);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Parsers_ProtocolVersion_protocolVersion
Negotiation_negotiate_version(TLSConstants_config cfg, HandshakeMessages_ch offer);

FStar_Pervasives_Native_option__CipherSuite_cipherSuite_
Negotiation_negotiate(
  Prims_list__Parsers_CipherSuite_cipherSuite *l1,
  Prims_list__CipherSuite_cipherSuite_ *l2,
  CipherSuite_sigAlg sa
);

typedef struct
K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite__s
{
  CipherSuite_kexAlg fst;
  FStar_Pervasives_Native_option__CipherSuite_sigAlg snd;
  CipherSuite_aeAlg thd;
  CipherSuite_cipherSuite_ f3;
}
K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite_;

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite__s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite_
    case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite_;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite_
TLSError_fatal__CipherSuite_kexAlg___FStar_Pervasives_Native_option_CipherSuite_sigAlg___CipherSuite_aeAlg___CipherSuite_cipherSuite_(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_kexAlg_FStar_Pervasives_Native_option__CipherSuite_sigAlg_CipherSuite_aeAlg_CipherSuite_cipherSuite_
Negotiation_negotiateCipherSuite(
  TLSConstants_config cfg,
  Parsers_ProtocolVersion_protocolVersion pv,
  Prims_list__Parsers_CipherSuite_cipherSuite *ccs,
  CipherSuite_sigAlg sa
);

bool
Negotiation_isSentinelRandomValue(
  Parsers_ProtocolVersion_protocolVersion c_pv,
  Parsers_ProtocolVersion_protocolVersion s_pv,
  FStar_Bytes_bytes s_random
);

bool
Negotiation_acceptableVersion(
  TLSConstants_config cfg,
  Parsers_ProtocolVersion_protocolVersion pv,
  FStar_Bytes_bytes sr
);

bool __eq__CipherSuite_cipherSuite_(CipherSuite_cipherSuite_ y, CipherSuite_cipherSuite_ x);

bool Negotiation_is_cs(CipherSuite_cipherSuite_ cs, CipherSuite_cipherSuite_ x);

bool
Negotiation_acceptableCipherSuite(
  TLSConstants_config cfg,
  Parsers_ProtocolVersion_protocolVersion spv,
  CipherSuite_cipherSuite_ cs
);

bool Negotiation_is_share_eq(CommonDH_group_ g1, CommonDH_keyShareEntry share);

FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation_matching_share(
  FStar_Pervasives_Native_option__Prims_list__Extensions_extension_ cext,
  CommonDH_group_ g1
);

typedef struct K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion_s
{
  CipherSuite_cipherSuite_ fst;
  Parsers_ProtocolVersion_protocolVersion snd;
}
K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion;

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___CipherSuite_cipherSuite__Parsers_ProtocolVersion_protocolVersion
TLSError_fatal__CipherSuite_cipherSuite____Parsers_ProtocolVersion_protocolVersion(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

typedef struct FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    Negotiation_mode case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode
TLSError_fatal__Negotiation_mode(Parsers_AlertDescription_alertDescription a, Prims_string s);

Prims_int
FStar_List_Tot_Base_length__FStar_Bytes_bytes___uint32_t(
  Prims_list__K___FStar_Bytes_bytes_uint32_t *uu___4_154
);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_FStar_Pervasives_Native_option__Prims_int_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    FStar_Pervasives_Native_option__Prims_int case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_FStar_Pervasives_Native_option__Prims_int;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_FStar_Pervasives_Native_option__Prims_int
TLSError_fatal__FStar_Pervasives_Native_option_Prims_int(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode
Negotiation_client_ServerHello(Negotiation_t ns, HandshakeMessages_sh sh);

FStar_Bytes_bytes
Negotiation_to_be_signed(
  Parsers_ProtocolVersion_protocolVersion pv,
  TLSConstants_role role,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes csr,
  FStar_Bytes_bytes tbs
);

Prims_list__Parsers_SignatureScheme_signatureScheme
*Negotiation_supported_signatureSchemes_12(Negotiation_mode mode);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode
Negotiation_client_ServerKeyExchange(
  Negotiation_t ns,
  Prims_list__FStar_Bytes_bytes *crt,
  HandshakeMessages_ske ske,
  FStar_Pervasives_Native_option__HandshakeMessages_cr ocr
);

typedef struct FStar_Pervasives_Native_option__HandshakeMessages_signature_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  HandshakeMessages_signature v;
}
FStar_Pervasives_Native_option__HandshakeMessages_signature;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode
Negotiation_clientComplete_13(
  Negotiation_t ns,
  Prims_list__Extensions_extension_ *ee,
  FStar_Pervasives_Native_option__HandshakeMessages_cr optCertRequest,
  FStar_Pervasives_Native_option__Prims_list__K___FStar_Bytes_bytes_Prims_list__Extensions_extension_
  optServerCert,
  FStar_Pervasives_Native_option__HandshakeMessages_signature optCertVerify,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes digest
);

#define Negotiation_PSK_EDH 0
#define Negotiation_JUST_EDH 1

typedef uint8_t Negotiation_cs13_tags;

typedef struct Negotiation_cs13_s
{
  Negotiation_cs13_tags tag;
  union {
    struct 
    {
      Prims_int j;
      FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ oks;
      CipherSuite_cipherSuite_ cs;
    }
    case_PSK_EDH;
    struct 
    {
      Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ oks;
      CipherSuite_cipherSuite_ cs;
    }
    case_JUST_EDH;
  }
  val;
}
Negotiation_cs13;

bool Negotiation_uu___is_PSK_EDH(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

Prims_int
Negotiation___proj__PSK_EDH__item__j(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

FStar_Pervasives_Native_option__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation___proj__PSK_EDH__item__oks(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

CipherSuite_cipherSuite_
Negotiation___proj__PSK_EDH__item__cs(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

bool Negotiation_uu___is_JUST_EDH(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation___proj__JUST_EDH__item__oks(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

CipherSuite_cipherSuite_
Negotiation___proj__JUST_EDH__item__cs(HandshakeMessages_ch offer, Negotiation_cs13 projectee);

typedef struct Prims_list__Negotiation_cs13_s Prims_list__Negotiation_cs13;

typedef struct Prims_list__Negotiation_cs13_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  Negotiation_cs13 hd;
  Prims_list__Negotiation_cs13 *tl;
}
Prims_list__Negotiation_cs13;

typedef struct Prims_list__CommonDH_group__s Prims_list__CommonDH_group_;

typedef struct Prims_list__CommonDH_group__s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  CommonDH_group_ hd;
  Prims_list__CommonDH_group_ *tl;
}
Prims_list__CommonDH_group_;

Prims_list__CipherSuite_cipherSuite_
*Negotiation_filter_cipherSuites13_aux(
  TLSConstants_config cfg,
  Prims_list__Parsers_CipherSuite_cipherSuite *l,
  Prims_list__CipherSuite_cipherSuite_ *accu
);

Prims_list__CipherSuite_cipherSuite_
*Negotiation_filter_cipherSuites13(
  TLSConstants_config cfg,
  Prims_list__Parsers_CipherSuite_cipherSuite *l
);

Prims_list__CommonDH_group_
*FStar_List_Tot_Base_map__Parsers_NamedGroup_namedGroup_CommonDH_group_(
  CommonDH_group_ (*f)(Parsers_NamedGroup_namedGroup x0),
  Prims_list__Parsers_NamedGroup_namedGroup *x
);

typedef struct K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite__s
{
  Parsers_NamedGroup_namedGroup fst;
  CipherSuite_cipherSuite_ snd;
}
K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_;

typedef struct
FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite__s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_ v;
}
FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_;

typedef struct
K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite__s
{
  Prims_list__Negotiation_cs13 *fst;
  FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_ snd;
}
K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_;

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite__s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_
    case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___Prims_list__Negotiation_cs13_FStar_Pervasives_Native_option__K___Parsers_NamedGroup_namedGroup_CipherSuite_cipherSuite_
Negotiation_compute_cs13(
  TLSConstants_config cfg,
  HandshakeMessages_ch o,
  Prims_list__K___FStar_Bytes_bytes_TLSConstants_pskInfo *psks,
  Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ *shares,
  bool server_cert
);

Prims_list__K___FStar_Bytes_bytes_TLSConstants_pskInfo
*Negotiation_filter_psk(uint32_t max_age, Prims_list__K___FStar_Bytes_bytes_uint32_t *l);

Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
*Negotiation_register_shares(Prims_list__Prims_dtuple2__CommonDH_group__CommonDH_pre_share_ *l);

typedef Prims_list__Extensions_extension_ *Negotiation_extra_ext;

#define Negotiation_ServerHelloRetryRequest 0
#define Negotiation_ServerMode 1

typedef uint8_t Negotiation_serverMode_tags;

typedef struct Negotiation_serverMode_s
{
  Negotiation_serverMode_tags tag;
  union {
    struct 
    {
      HandshakeMessages_hrr hrr;
      CipherSuite_cipherSuite_ cs;
    }
    case_ServerHelloRetryRequest;
    struct 
    {
      Negotiation_mode _0;
      FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme _1;
      Prims_list__Extensions_extension_ *_2;
    }
    case_ServerMode;
  }
  val;
}
Negotiation_serverMode;

bool Negotiation_uu___is_ServerHelloRetryRequest(Negotiation_serverMode projectee);

HandshakeMessages_hrr
Negotiation___proj__ServerHelloRetryRequest__item__hrr(Negotiation_serverMode projectee);

CipherSuite_cipherSuite_
Negotiation___proj__ServerHelloRetryRequest__item__cs(Negotiation_serverMode projectee);

bool Negotiation_uu___is_ServerMode(Negotiation_serverMode projectee);

Negotiation_mode Negotiation___proj__ServerMode__item___0(Negotiation_serverMode projectee);

FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
Negotiation___proj__ServerMode__item___1(Negotiation_serverMode projectee);

Prims_list__Extensions_extension_
*Negotiation___proj__ServerMode__item___2(Negotiation_serverMode projectee);

bool Extensions_uu___is_E_server_name____(Extensions_extension_ projectee);

FStar_Bytes_bytes Negotiation_get_sni(HandshakeMessages_ch o);

bool Extensions_uu___is_E_alpn____(Extensions_extension_ projectee);

Prims_list__FStar_Bytes_bytes *Negotiation_get_alpn(HandshakeMessages_ch o);

FStar_Bytes_bytes Negotiation_nego_alpn(HandshakeMessages_ch o, TLSConstants_config cfg);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_serverMode_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    Negotiation_serverMode case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_serverMode;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_serverMode
TLSError_fatal__Negotiation_serverMode(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_serverMode
Negotiation_computeServerMode(
  TLSConstants_config cfg,
  HandshakeMessages_ch co,
  FStar_Bytes_bytes serverRandom
);

FStar_Pervasives_Native_option__Extensions_extension_
Negotiation_find_client_extension_aux__Extensions_extension_(
  Extensions_extension_ env,
  bool (*filter1)(Extensions_extension_ x0, Extensions_extension_ x1),
  HandshakeMessages_ch o
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_serverMode
Negotiation_server_ClientHello(
  Negotiation_t ns,
  HandshakeMessages_ch offer,
  HandshakeLog_state *log
);

Prims_dtuple2__CommonDH_group__CommonDH_pre_share_
Negotiation_share_of_serverKeyShare(CommonDH_keyShareEntry ks);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Negotiation_mode
Negotiation_server_ServerShare(
  Negotiation_t ns,
  FStar_Pervasives_Native_option__CommonDH_keyShareEntry ks,
  Prims_list__Extensions_extension_ *app_exts
);

typedef struct Negotiation_hs_id_s
{
  Prims_list__FStar_Bytes_bytes *id_cert;
  FStar_Pervasives_Native_option__Parsers_SignatureScheme_signatureScheme id_sigalg;
}
Negotiation_hs_id;

Prims_list__FStar_Bytes_bytes
*Negotiation___proj__Mkhs_id__item__id_cert(Negotiation_hs_id projectee);

FStar_Pervasives_Native_option__Parsers_SignatureScheme_signatureScheme
Negotiation___proj__Mkhs_id__item__id_sigalg(Negotiation_hs_id projectee);

typedef struct FStar_Pervasives_Native_option__Negotiation_mode_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Negotiation_mode v;
}
FStar_Pervasives_Native_option__Negotiation_mode;

typedef FStar_Pervasives_Native_option__Negotiation_mode Negotiation_session;

FStar_Pervasives_Native_option__Negotiation_mode
Negotiation___proj__Mksession__item__session_nego(
  FStar_Pervasives_Native_option__Negotiation_mode projectee
);

#define Negotiation_Fresh 0
#define Negotiation_Resumed 1

typedef uint8_t Negotiation_handshake_tags;

typedef struct Negotiation_handshake_s
{
  Negotiation_handshake_tags tag;
  union {
    FStar_Pervasives_Native_option__Negotiation_mode case_Fresh;
    FStar_Pervasives_Native_option__Negotiation_mode case_Resumed;
  }
  val;
}
Negotiation_handshake;

bool Negotiation_uu___is_Fresh(Negotiation_handshake projectee);

FStar_Pervasives_Native_option__Negotiation_mode
Negotiation___proj__Fresh__item___0(Negotiation_handshake projectee);

bool Negotiation_uu___is_Resumed(Negotiation_handshake projectee);

FStar_Pervasives_Native_option__Negotiation_mode
Negotiation___proj__Resumed__item___0(Negotiation_handshake projectee);

#define __Negotiation_H_DEFINED
#endif
