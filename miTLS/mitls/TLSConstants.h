/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: D:\everest\kremlin\_build\src\Kremlin.native -minimal -add-include "kremlib.h" -fnoanonymous-unions -warn-error -9-7-6@4-14-15 -fsopts --debug,yes -verbose -library EverCrypt,EverCrypt.*,Hacl.*,Interop_assumptions,Check_sha_stdcall,Sha_update_bytes_stdcall,Check_aesni_stdcall -drop MonotoneMap -drop MonotoneMapNonDep -drop FStar.Tactics.\* -drop FStar.Tactics -drop Crypto.AEAD.\* -drop Crypto.HKDF -drop Crypto.HMAC -add-include "hacks.h" -add-include "kremlin/internal/compat.h" -bundle LowParse.\*,LowParseWrappers[rename=LowParse] -bundle Format.\* -bundle EverCrypt=EverCrypt,EverCrypt.\* -bundle FStar.\*,LowStar.\*,C,C.\*[rename=Mitls_Kremlib] -bundle Parsers.\* -bundle Spec.\* -bundle Meta.\* -bundle Lib.*[rename=Hacl_Lib] -bundle Hacl.\* -bundle KDF.\*,KDF,Idx,IV,Pkg,Pkg.\*[rename=Pkg] -bundle TLSConstants=TLSConstants,QD.TLS_protocolVersion,List.Helpers -bundle Hashing=Hashing.Spec,Hashing,Hashing.CRF,HMAC,HKDF,HMAC.UFCMA -bundle Old.Handshake=Old.HMAC.UFCMA,Old.Epochs,Old.KeySchedule,Old.Handshake -bundle StatefulLHAE=AEAD_GCM,LHAEPlain,StatefulPlain,StatefulLHAE -bundle StreamAE=StreamPlain,StreamAE -bundle CommonDH=TLS.Curve25519,DHGroup,ECGroup,CommonDH -bundle Content=Content,DataStream -bundle Record=Record,StAE,Transport,StreamDeltas -bundle PMS=PMS,RSAKey,TLSPRF -bundle Crypto.Plain=Buffer.Utils,Crypto.Indexing,Crypto.Plain,Crypto.Symmetric.Bytes -bundle Flags=DebugFlags,Flags,Flag,TLSInfoFlags -bundle Vale.Stdcalls.*,Vale.Interop,Vale.Interop.*,Vale.Wrapper.X64.*[rename=Vale] -bundle Vale.Inline.X64.*[rename=Vale_Inline] -bundle Vale.*[rename=Unused2] -ldopts -L,D:/everest/MLCrypto/openssl,-lcrypto,-lssl extract/Kremlin/FStar_Pervasives_Native.krml extract/Kremlin/FStar_Pervasives.krml extract/Kremlin/FStar_Squash.krml extract/Kremlin/FStar_Classical.krml extract/Kremlin/FStar_Preorder.krml extract/Kremlin/FStar_Calc.krml extract/Kremlin/FStar_Mul.krml extract/Kremlin/FStar_Math_Lib.krml extract/Kremlin/FStar_Math_Lemmas.krml extract/Kremlin/FStar_StrongExcludedMiddle.krml extract/Kremlin/FStar_FunctionalExtensionality.krml extract/Kremlin/FStar_List_Tot_Base.krml extract/Kremlin/FStar_List_Tot_Properties.krml extract/Kremlin/FStar_List_Tot.krml extract/Kremlin/FStar_Seq_Base.krml extract/Kremlin/FStar_Seq_Properties.krml extract/Kremlin/FStar_Seq.krml extract/Kremlin/FStar_BitVector.krml extract/Kremlin/FStar_UInt.krml extract/Kremlin/FStar_UInt32.krml extract/Kremlin/FStar_UInt8.krml extract/Kremlin/FStar_Exn.krml extract/Kremlin/FStar_Set.krml extract/Kremlin/FStar_Monotonic_Witnessed.krml extract/Kremlin/FStar_Ghost.krml extract/Kremlin/FStar_ErasedLogic.krml extract/Kremlin/FStar_PropositionalExtensionality.krml extract/Kremlin/FStar_PredicateExtensionality.krml extract/Kremlin/FStar_TSet.krml extract/Kremlin/FStar_Monotonic_Heap.krml extract/Kremlin/FStar_Heap.krml extract/Kremlin/FStar_ST.krml extract/Kremlin/FStar_All.krml extract/Kremlin/Lib_LoopCombinators.krml extract/Kremlin/FStar_Int.krml extract/Kremlin/FStar_Int64.krml extract/Kremlin/FStar_Int63.krml extract/Kremlin/FStar_Int32.krml extract/Kremlin/FStar_Int16.krml extract/Kremlin/FStar_Int8.krml extract/Kremlin/FStar_UInt64.krml extract/Kremlin/FStar_UInt63.krml extract/Kremlin/FStar_UInt16.krml extract/Kremlin/FStar_Int_Cast.krml extract/Kremlin/FStar_UInt128.krml extract/Kremlin/FStar_Int_Cast_Full.krml extract/Kremlin/FStar_Int128.krml extract/Kremlin/Lib_IntTypes.krml extract/Kremlin/Lib_RawIntTypes.krml extract/Kremlin/Lib_Sequence.krml extract/Kremlin/Lib_ByteSequence.krml extract/Kremlin/Spec_Chacha20.krml extract/Kremlin/Meta_Attribute.krml extract/Kremlin/FStar_Map.krml extract/Kremlin/FStar_Monotonic_HyperHeap.krml extract/Kremlin/FStar_Monotonic_HyperStack.krml extract/Kremlin/FStar_HyperStack.krml extract/Kremlin/FStar_HyperStack_ST.krml extract/Kremlin/FStar_Universe.krml extract/Kremlin/FStar_GSet.krml extract/Kremlin/FStar_ModifiesGen.krml extract/Kremlin/FStar_Range.krml extract/Kremlin/FStar_Reflection_Types.krml extract/Kremlin/FStar_Tactics_Types.krml extract/Kremlin/FStar_Tactics_Result.krml extract/Kremlin/FStar_Tactics_Effect.krml extract/Kremlin/FStar_Reflection_Data.krml extract/Kremlin/FStar_Tactics_Builtins.krml extract/Kremlin/FStar_Reflection_Const.krml extract/Kremlin/FStar_Char.krml extract/Kremlin/FStar_List.krml extract/Kremlin/FStar_String.krml extract/Kremlin/FStar_Order.krml extract/Kremlin/FStar_Reflection_Basic.krml extract/Kremlin/FStar_Reflection_Derived.krml extract/Kremlin/FStar_Reflection_Derived_Lemmas.krml extract/Kremlin/FStar_Reflection.krml extract/Kremlin/FStar_Tactics_SyntaxHelpers.krml extract/Kremlin/FStar_Tactics_Util.krml extract/Kremlin/FStar_Reflection_Formula.krml extract/Kremlin/FStar_Tactics_Derived.krml extract/Kremlin/FStar_Tactics_Logic.krml extract/Kremlin/FStar_Tactics.krml extract/Kremlin/FStar_BigOps.krml extract/Kremlin/LowStar_Monotonic_Buffer.krml extract/Kremlin/LowStar_Buffer.krml extract/Kremlin/LowStar_BufferOps.krml extract/Kremlin/Spec_Loops.krml extract/Kremlin/C_Loops.krml extract/Kremlin/Lib_Loops.krml extract/Kremlin/FStar_Endianness.krml extract/Kremlin/LowStar_Endianness.krml extract/Kremlin/LowStar_ImmutableBuffer.krml extract/Kremlin/Lib_Buffer.krml extract/Kremlin/Lib_ByteBuffer.krml extract/Kremlin/FStar_HyperStack_All.krml extract/Kremlin/Lib_IntVector_Intrinsics.krml extract/Kremlin/Spec_GaloisField.krml extract/Kremlin/Spec_AES.krml extract/Kremlin/Lib_IntVector.krml extract/Kremlin/Hacl_Spec_Chacha20_Vec.krml extract/Kremlin/Hacl_Spec_Chacha20_Lemmas.krml extract/Kremlin/Lib_Sequence_Lemmas.krml extract/Kremlin/Hacl_Spec_Chacha20_Equiv.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32xN.krml extract/Kremlin/Hacl_Impl_Chacha20_Vec.krml extract/Kremlin/Vale_Lib_Seqs_s.krml extract/Kremlin/Vale_Def_Words_s.krml extract/Kremlin/Vale_Def_Words_Four_s.krml extract/Kremlin/Vale_Def_Words_Two_s.krml extract/Kremlin/Vale_Def_Words_Seq_s.krml extract/Kremlin/Vale_Def_Opaque_s.krml extract/Kremlin/Vale_Def_Types_s.krml extract/Kremlin/Vale_X64_Machine_s.krml extract/Kremlin/Vale_Lib_Map16.krml extract/Kremlin/Vale_Def_Prop_s.krml extract/Kremlin/Vale_X64_Flags.krml extract/Kremlin/Vale_X64_CPU_Features_s.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_internal.krml extract/Kremlin/Vale_Lib_Meta.krml extract/Kremlin/Vale_Def_Words_Two.krml extract/Kremlin/Vale_Lib_Seqs.krml extract/Kremlin/Vale_Def_TypesNative_s.krml extract/Kremlin/Vale_Arch_TypesNative.krml extract/Kremlin/Vale_Def_Words_Seq.krml extract/Kremlin/Vale_Arch_Types.krml extract/Kremlin/Vale_Curve25519_Fast_defs.krml extract/Kremlin/FStar_Algebra_CommMonoid.krml extract/Kremlin/FStar_Tactics_CanonCommSemiring.krml extract/Kremlin/Vale_Curve25519_FastUtil_helpers.krml extract/Kremlin/Vale_Curve25519_FastHybrid_helpers.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_external.krml extract/Kremlin/Vale_X64_Regs.krml extract/Kremlin/FStar_Float.krml extract/Kremlin/FStar_IO.krml extract/Kremlin/Vale_Def_PossiblyMonad.krml extract/Kremlin/LowStar_BufferView_Down.krml extract/Kremlin/LowStar_BufferView_Up.krml extract/Kremlin/Vale_Interop_Views.krml extract/Kremlin/FStar_Option.krml extract/Kremlin/Vale_Lib_Set.krml extract/Kremlin/Vale_X64_Instruction_s.krml extract/Kremlin/Vale_X64_Bytes_Code_s.krml extract/Kremlin/Vale_AES_AES_s.krml extract/Kremlin/Vale_Math_Poly2_Defs_s.krml extract/Kremlin/Vale_Math_Poly2_s.krml extract/Kremlin/Vale_Math_Poly2_Bits_s.krml extract/Kremlin/Spec_Hash_Definitions.krml extract/Kremlin/Spec_Hash_Lemmas0.krml extract/Kremlin/Spec_Hash_PadFinish.krml extract/Kremlin/Spec_SHA2_Constants.krml extract/Kremlin/Spec_SHA2.krml extract/Kremlin/Vale_X64_CryptoInstructions_s.krml extract/Kremlin/Vale_X64_Instructions_s.krml extract/Kremlin/Vale_Arch_HeapTypes_s.krml extract/Kremlin/Vale_Interop_Types.krml extract/Kremlin/Vale_Arch_MachineHeap_s.krml extract/Kremlin/Vale_Interop_Heap_s.krml extract/Kremlin/LowStar_Modifies.krml extract/Kremlin/LowStar_ModifiesPat.krml extract/Kremlin/LowStar_BufferView.krml extract/Kremlin/Vale_Lib_BufferViewHelpers.krml extract/Kremlin/Vale_Interop.krml extract/Kremlin/Vale_Arch_HeapImpl.krml extract/Kremlin/Vale_Arch_Heap.krml extract/Kremlin/Vale_X64_Machine_Semantics_s.krml extract/Kremlin/Vale_Interop_Base.krml extract/Kremlin/Vale_X64_Memory.krml extract/Kremlin/Vale_Arch_MachineHeap.krml extract/Kremlin/Vale_X64_Stack_i.krml extract/Kremlin/Vale_X64_Stack_Sems.krml extract/Kremlin/Vale_X64_BufferViewStore.krml extract/Kremlin/Vale_X64_Memory_Sems.krml extract/Kremlin/Vale_X64_State.krml extract/Kremlin/Vale_X64_StateLemmas.krml extract/Kremlin/Vale_X64_Lemmas.krml extract/Kremlin/Vale_X64_Print_s.krml extract/Kremlin/Vale_X64_Decls.krml extract/Kremlin/Vale_X64_QuickCode.krml extract/Kremlin/Vale_X64_QuickCodes.krml extract/Kremlin/Vale_X64_Taint_Semantics.krml extract/Kremlin/Vale_X64_InsLemmas.krml extract/Kremlin/Vale_X64_InsBasic.krml extract/Kremlin/Vale_X64_InsMem.krml extract/Kremlin/Vale_X64_InsVector.krml extract/Kremlin/Vale_X64_InsStack.krml extract/Kremlin/Vale_Curve25519_X64_FastHybrid.krml extract/Kremlin/Vale_Bignum_Defs.krml extract/Kremlin/Vale_Bignum_X64.krml extract/Kremlin/Vale_Curve25519_FastSqr_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastSqr.krml extract/Kremlin/Vale_Curve25519_FastMul_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastMul.krml extract/Kremlin/Vale_Curve25519_X64_FastWide.krml extract/Kremlin/Vale_Curve25519_X64_FastUtil.krml extract/Kremlin/Vale_X64_MemoryAdapters.krml extract/Kremlin/Vale_Interop_Assumptions.krml extract/Kremlin/Vale_Interop_X64.krml extract/Kremlin/Vale_AsLowStar_ValeSig.krml extract/Kremlin/Vale_AsLowStar_LowStarSig.krml extract/Kremlin/Vale_AsLowStar_MemoryHelpers.krml extract/Kremlin/Vale_AsLowStar_Wrapper.krml extract/Kremlin/Vale_Stdcalls_X64_Fadd.krml extract/Kremlin/Vale_Wrapper_X64_Fadd.krml extract/Kremlin/Spec_SHA1.krml extract/Kremlin/Spec_MD5.krml extract/Kremlin/Spec_Agile_Hash.krml extract/Kremlin/Spec_Hash_Incremental.krml extract/Kremlin/Spec_Hash_Lemmas.krml extract/Kremlin/FStar_Kremlin_Endianness.krml extract/Kremlin/Hacl_Hash_Lemmas.krml extract/Kremlin/Hacl_Hash_Definitions.krml extract/Kremlin/Hacl_Hash_PadFinish.krml extract/Kremlin/Hacl_Hash_MD.krml extract/Kremlin/Spec_SHA2_Lemmas.krml extract/Kremlin/Vale_X64_Stack.krml extract/Kremlin/Vale_SHA_SHA_helpers.krml extract/Kremlin/Vale_X64_InsSha.krml extract/Kremlin/Vale_SHA_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Sha.krml extract/Kremlin/FStar_BV.krml extract/Kremlin/FStar_Reflection_Arith.krml extract/Kremlin/FStar_Tactics_BV.krml extract/Kremlin/Vale_Lib_Bv_s.krml extract/Kremlin/Vale_Math_Bits.krml extract/Kremlin/Vale_Lib_Tactics.krml extract/Kremlin/Vale_Poly1305_Bitvectors.krml extract/Kremlin/Vale_Math_Lemmas_Int.krml extract/Kremlin/FStar_Tactics_Canon.krml extract/Kremlin/Vale_Poly1305_Spec_s.krml extract/Kremlin/Vale_Poly1305_Math.krml extract/Kremlin/Vale_Poly1305_Util.krml extract/Kremlin/Vale_Poly1305_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Poly.krml extract/Kremlin/Vale_Wrapper_X64_Poly.krml extract/Kremlin/Vale_Arch_BufferFriend.krml extract/Kremlin/Vale_SHA_Simplify_Sha.krml extract/Kremlin/Vale_Wrapper_X64_Sha.krml extract/Kremlin/Hacl_Hash_Core_SHA2_Constants.krml extract/Kremlin/Hacl_Hash_Core_SHA2.krml extract/Kremlin/Hacl_Hash_SHA2.krml extract/Kremlin/Hacl_Hash_Core_SHA1.krml extract/Kremlin/Hacl_Hash_SHA1.krml extract/Kremlin/Hacl_Hash_Core_MD5.krml extract/Kremlin/Hacl_Hash_MD5.krml extract/Kremlin/C.krml extract/Kremlin/C_String.krml extract/Kremlin/C_Failure.krml extract/Kremlin/FStar_Int31.krml extract/Kremlin/FStar_UInt31.krml extract/Kremlin/FStar_Integers.krml extract/Kremlin/EverCrypt_StaticConfig.krml extract/Kremlin/EverCrypt_TargetConfig.krml extract/Kremlin/Vale_Lib_Basic.krml extract/Kremlin/Vale_Lib_X64_Cpuid.krml extract/Kremlin/Vale_Lib_X64_Cpuidstdcall.krml extract/Kremlin/Vale_Stdcalls_X64_Cpuid.krml extract/Kremlin/Vale_Wrapper_X64_Cpuid.krml extract/Kremlin/EverCrypt_AutoConfig2.krml extract/Kremlin/EverCrypt_Helpers.krml extract/Kremlin/EverCrypt_Hash.krml extract/Kremlin/Spec_Agile_HMAC.krml extract/Kremlin/Hacl_HMAC.krml extract/Kremlin/EverCrypt_HMAC.krml extract/Kremlin/Declassify.krml extract/Kremlin/FStar_Bytes.krml extract/Kremlin/Hashing_Spec.krml extract/Kremlin/LowParse_Bytes32.krml extract/Kremlin/LowParse_Bytes.krml extract/Kremlin/LowParse_Spec_Base.krml extract/Kremlin/LowParse_SLow_Base.krml extract/Kremlin/LowParse_Spec_Option.krml extract/Kremlin/LowParse_SLow_Option.krml extract/Kremlin/LowParse_Spec_Combinators.krml extract/Kremlin/LowParse_Spec_IfThenElse.krml extract/Kremlin/LowParse_SLow_Combinators.krml extract/Kremlin/LowParse_Spec_List.krml extract/Kremlin/LowParse_SLow_List.krml extract/Kremlin/Spec_Curve25519_Lemmas.krml extract/Kremlin/Spec_Curve25519.krml extract/Kremlin/Hacl_Spec_Curve25519_AddAndDouble.krml extract/Kremlin/Hacl_Impl_Curve25519_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Core.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields_Core.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64.krml extract/Kremlin/Hacl_Impl_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields.krml extract/Kremlin/Hacl_Impl_Curve25519_AddAndDouble.krml extract/Kremlin/Spec_Poly1305.krml extract/Kremlin/Hacl_Spec_Poly1305_Vec.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Spec_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Equiv.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_256.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_128.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_32.krml extract/Kremlin/Hacl_Impl_Poly1305_Fields.krml extract/Kremlin/Hacl_Impl_Poly1305.krml extract/Kremlin/Spec_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305_PolyCore.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305.krml extract/Kremlin/FStar_List_Pure_Base.krml extract/Kremlin/FStar_List_Pure_Properties.krml extract/Kremlin/FStar_List_Pure.krml extract/Kremlin/Meta_Interface.krml extract/Kremlin/Hacl_Meta_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32.krml extract/Kremlin/Hacl_Impl_Chacha20.krml extract/Kremlin/Hacl_Chacha20.krml extract/Kremlin/Hacl_Meta_Poly1305.krml extract/Kremlin/Hacl_Poly1305_32.krml extract/Kremlin/Hacl_Chacha20Poly1305_32.krml extract/Kremlin/FStar_Dyn.krml extract/Kremlin/LowStar_Failure.krml extract/Kremlin/EverCrypt_Vale.krml extract/Kremlin/EverCrypt_Specs.krml extract/Kremlin/EverCrypt_OpenSSL.krml extract/Kremlin/EverCrypt_Hacl.krml extract/Kremlin/EverCrypt_BCrypt.krml extract/Kremlin/EverCrypt_Cipher.krml extract/Kremlin/Hacl_Spec_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Generic.krml extract/Kremlin/Hacl_Meta_Curve25519.krml extract/Kremlin/Hacl_Curve25519_51.krml extract/Kremlin/Vale_Stdcalls_X64_Fswap.krml extract/Kremlin/Vale_Wrapper_X64_Fswap.krml extract/Kremlin/Vale_X64_Print_Inline_s.krml extract/Kremlin/Vale_Inline_X64_Fswap_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsqr.krml extract/Kremlin/Vale_Wrapper_X64_Fsqr.krml extract/Kremlin/Vale_Inline_X64_Fsqr_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fmul.krml extract/Kremlin/Vale_Wrapper_X64_Fmul.krml extract/Kremlin/Vale_Inline_X64_Fmul_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsub.krml extract/Kremlin/Vale_Wrapper_X64_Fsub.krml extract/Kremlin/Vale_Inline_X64_Fadd_inline.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64_Vale.krml extract/Kremlin/Hacl_Curve25519_64.krml extract/Kremlin/EverCrypt_Curve25519.krml extract/Kremlin/Hacl_Poly1305_128.krml extract/Kremlin/Hacl_Poly1305_256.krml extract/Kremlin/Vale_Poly1305_Equiv.krml extract/Kremlin/Vale_Poly1305_CallingFromLowStar.krml extract/Kremlin/EverCrypt_Poly1305.krml extract/Kremlin/Lib_Memzero.krml extract/Kremlin/Spec_HMAC_DRBG.krml extract/Kremlin/Hacl_HMAC_DRBG.krml extract/Kremlin/Lib_RandomBuffer_System.krml extract/Kremlin/EverCrypt_DRBG.krml extract/Kremlin/Spec_Agile_HKDF.krml extract/Kremlin/Hacl_HKDF.krml extract/Kremlin/EverCrypt_HKDF.krml extract/Kremlin/EverCrypt.krml extract/Kremlin/FStar_Printf.krml extract/Kremlin/FStar_Error.krml extract/Kremlin/FStar_Tcp.krml extract/Kremlin/LowParse_Spec_FLData.krml extract/Kremlin/LowParse_Math.krml extract/Kremlin/LowParse_Slice.krml extract/Kremlin/LowParse_Low_Base.krml extract/Kremlin/LowParse_Low_Combinators.krml extract/Kremlin/LowParse_Low_FLData.krml extract/Kremlin/LowParse_Spec_Seq.krml extract/Kremlin/LowParse_Spec_Int.krml extract/Kremlin/LowParse_Spec_BoundedInt.krml extract/Kremlin/LowParse_Low_Endianness.krml extract/Kremlin/LowParse_BitFields.krml extract/Kremlin/LowParse_Endianness.krml extract/Kremlin/LowParse_Endianness_BitFields.krml extract/Kremlin/LowParse_Low_BoundedInt.krml extract/Kremlin/LowParse_Spec_SeqBytes_Base.krml extract/Kremlin/LowParse_Spec_DER.krml extract/Kremlin/LowParse_Spec_BCVLI.krml extract/Kremlin/LowParse_Spec_AllIntegers.krml extract/Kremlin/LowParse_Spec_VLData.krml extract/Kremlin/LowParse_Low_VLData.krml extract/Kremlin/LowParse_Spec_VLGen.krml extract/Kremlin/LowParse_Low_VLGen.krml extract/Kremlin/LowParse_Low_Int.krml extract/Kremlin/LowParse_Low_DER.krml extract/Kremlin/LowParse_Low_BCVLI.krml extract/Kremlin/LowParse_Low_List.krml extract/Kremlin/LowParse_Spec_Array.krml extract/Kremlin/LowParse_Spec_VCList.krml extract/Kremlin/LowParse_Low_VCList.krml extract/Kremlin/LowParse_Low_IfThenElse.krml extract/Kremlin/LowParse_TacLib.krml extract/Kremlin/LowParse_Spec_Enum.krml extract/Kremlin/LowParse_Spec_Sum.krml extract/Kremlin/LowParse_Low_Enum.krml extract/Kremlin/LowParse_Low_Sum.krml extract/Kremlin/LowParse_Low_Tac_Sum.krml extract/Kremlin/LowParse_Low_Option.krml extract/Kremlin/LowParse_Spec_Bytes.krml extract/Kremlin/LowParse_Low_Bytes.krml extract/Kremlin/LowParse_Low_Array.krml extract/Kremlin/LowParse_Low.krml extract/Kremlin/LowParse_SLow_FLData.krml extract/Kremlin/LowParse_SLow_VLGen.krml extract/Kremlin/LowParse_Spec_Endianness.krml extract/Kremlin/LowParse_Spec_Endianness_Instances.krml extract/Kremlin/LowParse_SLow_Endianness.krml extract/Kremlin/LowParse_SLow_BoundedInt.krml extract/Kremlin/LowParse_SLow_Int.krml extract/Kremlin/LowParse_SLow_DER.krml extract/Kremlin/LowParse_SLow_BCVLI.krml extract/Kremlin/LowParse_SLow_VCList.krml extract/Kremlin/LowParse_SLow_IfThenElse.krml extract/Kremlin/LowParse_SLow_Enum.krml extract/Kremlin/LowParse_SLow_Sum.krml extract/Kremlin/LowParse_SLow_Tac_Enum.krml extract/Kremlin/LowParse_SLow_Tac_Sum.krml extract/Kremlin/LowParse_SLow_VLData.krml extract/Kremlin/LowParse_SLow_Bytes.krml extract/Kremlin/LowParse_SLow_Array.krml extract/Kremlin/LowParse_Spec_Tac_Combinators.krml extract/Kremlin/LowParse_SLow.krml extract/Kremlin/Parsers_AlertDescription.krml extract/Kremlin/Parsers_AlertLevel.krml extract/Kremlin/Parsers_Alert.krml extract/Kremlin/TLSError.krml extract/Kremlin/Parsers_NamedGroup.krml extract/Kremlin/Format_Constants.krml extract/Kremlin/Format_UncompressedPointRepresentation.krml extract/Kremlin/Format_KeyShareEntry.krml extract/Kremlin/Flags.krml extract/Kremlin/Parsers_ECCurveType.krml extract/Kremlin/DebugFlags.krml extract/Kremlin/FStar_DependentMap.krml extract/Kremlin/FStar_Monotonic_DependentMap.krml extract/Kremlin/Mem.krml extract/Kremlin/Random.krml extract/Kremlin/TLS_Curve25519.krml extract/Kremlin/Parse.krml extract/Kremlin/ECGroup.krml extract/Kremlin/DHGroup.krml extract/Kremlin/Parsers_NamedGroupList.krml extract/Kremlin/CommonDH.krml extract/Kremlin/FFICallbacks.krml extract/Kremlin/Parsers_CompressionMethod.krml extract/Kremlin/Parsers_SignatureScheme.krml extract/Kremlin/Parsers_SignatureSchemeList.krml extract/Kremlin/LowParseWrappers.krml extract/Kremlin/Parsers_CipherSuite.krml extract/Kremlin/CipherSuite.krml extract/Kremlin/Parsers_ProtocolVersion.krml extract/Kremlin/TLSConstants.krml extract/Kremlin/HMAC.krml extract/Kremlin/RSAKey.krml extract/Kremlin/PMS.krml extract/Kremlin/List_Helpers.krml extract/Kremlin/PSK.krml extract/Kremlin/Extensions.krml extract/Kremlin/Cert.krml extract/Kremlin/TLSInfoFlags.krml extract/Kremlin/FStar_Date.krml extract/Kremlin/Nonce.krml extract/Kremlin/TLSInfo.krml extract/Kremlin/Crypto_Indexing.krml extract/Kremlin/Flag.krml extract/Kremlin/FStar_Old_Endianness.krml extract/Kremlin/FStar_Buffer.krml extract/Kremlin/C_Compat_Loops.krml extract/Kremlin/Buffer_Utils.krml extract/Kremlin/Crypto_Symmetric_Bytes.krml extract/Kremlin/Crypto_Plain.krml extract/Kremlin/AEADProvider.krml extract/Kremlin/Range.krml extract/Kremlin/DataStream.krml extract/Kremlin/Alert.krml extract/Kremlin/Content.krml extract/Kremlin/StreamPlain.krml extract/Kremlin/Hashing.krml extract/Kremlin/TLSPRF.krml extract/Kremlin/Hashing_CRF.krml extract/Kremlin/HandshakeMessages.krml extract/Kremlin/HandshakeLog.krml extract/Kremlin/Parsers_Boolean.krml extract/Kremlin/Parsers_TicketContents13_custom_data.krml extract/Kremlin/Parsers_TicketContents13_nonce.krml extract/Kremlin/Parsers_TicketContents13_rms.krml extract/Kremlin/Parsers_TicketContents13.krml extract/Kremlin/Parsers_TicketContents12_master_secret.krml extract/Kremlin/Parsers_TicketContents12.krml extract/Kremlin/Parsers_TicketVersion.krml extract/Kremlin/Parsers_TicketContents.krml extract/Kremlin/Parsers_TicketContents12_master_secret_Low.krml extract/Kremlin/Parsers_Ticket_Low.krml extract/Kremlin/Ticket.krml extract/Kremlin/Negotiation.krml extract/Kremlin/FStar_Monotonic_Seq.krml extract/Kremlin/StreamAE.krml extract/Kremlin/StatefulPlain.krml extract/Kremlin/LHAEPlain.krml extract/Kremlin/AEAD_GCM.krml extract/Kremlin/StatefulLHAE.krml extract/Kremlin/StAE.krml extract/Kremlin/Old_HMAC_UFCMA.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_context.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_label.krml extract/Kremlin/Parsers_HKDF_HkdfLabel.krml extract/Kremlin/HKDF.krml extract/Kremlin/Old_KeySchedule.krml extract/Kremlin/Old_Epochs.krml extract/Kremlin/FStar_HyperStack_IO.krml extract/Kremlin/StreamDeltas.krml extract/Kremlin/Old_Handshake.krml extract/Kremlin/Transport.krml extract/Kremlin/BufferBytes.krml extract/Kremlin/Record.krml extract/Kremlin/Connection.krml extract/Kremlin/TLS.krml extract/Kremlin/FFI.krml extract/Kremlin/Pkg.krml extract/Kremlin/Idx.krml extract/Kremlin/Model.krml extract/Kremlin/FStar_Test.krml extract/Kremlin/Pkg_Tree.krml extract/Kremlin/KDF.krml extract/Kremlin/QUIC.krml extract/Kremlin/IV.krml extract/Kremlin/KDF_Rekey.krml -tmpdir extract/Kremlin-Library -skip-compilation
  F* version: 1f9505d5
  KreMLin version: 44acff92
 */
#include "kremlib.h"
#include "hacks.h"
#include "kremlin/internal/compat.h"

#ifndef __TLSConstants_H
#define __TLSConstants_H

#include "Parse.h"
#include "Spec.h"
#include "Parsers.h"
#include "EverCrypt.h"
#include "Mitls_Kremlib.h"
#include "CipherSuite.h"
#include "Prims.h"
#include "CommonDH.h"
#include "Hashing.h"
#include "TLSError.h"


#define TLSConstants_Client 0
#define TLSConstants_Server 1

typedef uint8_t TLSConstants_role;

bool TLSConstants_uu___is_Client(TLSConstants_role projectee);

bool TLSConstants_uu___is_Server(TLSConstants_role projectee);

TLSConstants_role TLSConstants_dualRole(TLSConstants_role uu___0_130);

#define TLSConstants_Reader 0
#define TLSConstants_Writer 1

typedef uint8_t TLSConstants_rw;

bool TLSConstants_uu___is_Reader(TLSConstants_rw projectee);

bool TLSConstants_uu___is_Writer(TLSConstants_rw projectee);

typedef Parsers_ProtocolVersion_protocolVersion TLSConstants_protocolVersion_;

typedef Parsers_ProtocolVersion_protocolVersion TLSConstants_protocolVersion;

bool TLSConstants_is_pv_13(Parsers_ProtocolVersion_protocolVersion uu___1_163);

/*
 Serializing function for the protocol version 
*/
FStar_Bytes_bytes TLSConstants_versionBytes(Parsers_ProtocolVersion_protocolVersion x);

extern Prims_string TLSConstants_parse_protocolVersion_error_msg;

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Parsers_ProtocolVersion_protocolVersion_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    Parsers_ProtocolVersion_protocolVersion case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Parsers_ProtocolVersion_protocolVersion;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Parsers_ProtocolVersion_protocolVersion
TLSError_fatal__Parsers_ProtocolVersion_protocolVersion(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Parsers_ProtocolVersion_protocolVersion
TLSConstants_parseVersion(FStar_Bytes_bytes x);

typedef struct
K___Parsers_ProtocolVersion_protocolVersion_Parsers_ProtocolVersion_protocolVersion_s
{
  Parsers_ProtocolVersion_protocolVersion fst;
  Parsers_ProtocolVersion_protocolVersion snd;
}
K___Parsers_ProtocolVersion_protocolVersion_Parsers_ProtocolVersion_protocolVersion;

/*
 Determine the oldest protocol versions for TLS 
*/
Parsers_ProtocolVersion_protocolVersion
TLSConstants_minPV(
  Parsers_ProtocolVersion_protocolVersion a,
  Parsers_ProtocolVersion_protocolVersion b
);

bool
TLSConstants_geqPV(
  Parsers_ProtocolVersion_protocolVersion a,
  Parsers_ProtocolVersion_protocolVersion b
);

Spec_Hash_Definitions_hash_alg TLSConstants_aeAlg_hash(CipherSuite_aeAlg uu___2_283);

/*
 Determine if this algorithm provide padding support with TLS 1.2 
*/
bool TLSConstants_lhae(CipherSuite_aeAlg uu___3_303);

/*
 Sequence numbers for StreamAE/StatefulLHAE 
*/
bool TLSConstants_is_seqn(Prims_int n1);

typedef Prims_int TLSConstants_seqn_t;

extern bool
TLSConstants_strongAuthAlg(
  Parsers_ProtocolVersion_protocolVersion uu____340,
  CipherSuite_aeAlg uu____341
);

bool
TLSConstants_strongAEAlg(
  Parsers_ProtocolVersion_protocolVersion uu____356,
  CipherSuite_aeAlg uu____357
);

/*
 Encryption key sizes 
*/
Prims_int TLSConstants_encKeySize(CipherSuite_encAlg uu___4_367);

/*
 AEAD salt sizes 
*/
Prims_int TLSConstants_aeadSaltSize(EverCrypt_aead_alg uu___5_378);

/*
 AEAD 
*/
Prims_int TLSConstants_aeadRecordIVSize(EverCrypt_aead_alg uu___6_392);

extern Prims_int TLSConstants_max_TLSPlaintext_fragment_length;

extern Prims_int TLSConstants_max_TLSCompressed_fragment_length;

extern Prims_int TLSConstants_max_TLSCiphertext_fragment_length;

extern Prims_int TLSConstants_max_TLSCiphertext_fragment_length_13;

bool
TLSConstants_is_handshake13_signatureScheme(Parsers_SignatureScheme_signatureScheme uu___7_418);

bool
TLSConstants_is_supported_signatureScheme(Parsers_SignatureScheme_signatureScheme uu___8_440);

typedef Parsers_SignatureScheme_signatureScheme TLSConstants_supported_signatureScheme;

typedef struct K___CipherSuite_sigAlg_Hashing_Spec_tls_alg_s
{
  CipherSuite_sigAlg fst;
  Hashing_Spec_tls_alg snd;
}
K___CipherSuite_sigAlg_Hashing_Spec_tls_alg;

K___CipherSuite_sigAlg_Hashing_Spec_tls_alg
TLSConstants_sigHashAlg_of_signatureScheme(Parsers_SignatureScheme_signatureScheme s);

Parsers_SignatureScheme_signatureScheme
TLSConstants_signatureScheme_of_sigHashAlg(CipherSuite_sigAlg sa, Hashing_Spec_tls_alg ha);

FStar_Bytes_bytes
TLSConstants_signatureSchemeListBytes(
  Prims_list__Parsers_SignatureScheme_signatureScheme *algs
);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Parsers_SignatureScheme_signatureScheme_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    Prims_list__Parsers_SignatureScheme_signatureScheme *case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Parsers_SignatureScheme_signatureScheme;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Parsers_SignatureScheme_signatureScheme
TLSError_fatal__Prims_list_Parsers_SignatureScheme_signatureScheme(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Parsers_SignatureScheme_signatureScheme
TLSConstants_parseSignatureSchemeList(FStar_Bytes_bytes b);

typedef Parsers_CompressionMethod_compressionMethod TLSConstants_compression;

FStar_Bytes_bytes TLSConstants_compressionBytes(Parsers_CompressionMethod_compressionMethod x);

Parsers_CompressionMethod_compressionMethod TLSConstants_parseCompression(FStar_Bytes_bytes x);

typedef struct Prims_list__Parsers_CompressionMethod_compressionMethod_s
Prims_list__Parsers_CompressionMethod_compressionMethod;

typedef struct Prims_list__Parsers_CompressionMethod_compressionMethod_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  Parsers_CompressionMethod_compressionMethod hd;
  Prims_list__Parsers_CompressionMethod_compressionMethod *tl;
}
Prims_list__Parsers_CompressionMethod_compressionMethod;

typedef Prims_list__Parsers_CompressionMethod_compressionMethod *TLSConstants_compressions;

Prims_list__Parsers_CompressionMethod_compressionMethod
*TLSConstants_parseCompressions(FStar_Bytes_bytes b);

FStar_Bytes_bytes
TLSConstants_compressionMethodsBytes(
  Prims_list__Parsers_CompressionMethod_compressionMethod *cms
);

typedef FStar_Bytes_bytes TLSConstants_prflabel;

extern FStar_Bytes_bytes TLSConstants_extract_label;

extern FStar_Bytes_bytes TLSConstants_extended_extract_label;

extern FStar_Bytes_bytes TLSConstants_kdf_label;

#define TLSConstants_PRF_SSL3_nested 0
#define TLSConstants_PRF_SSL3_concat 1
#define TLSConstants_PRF_TLS_1p01 2
#define TLSConstants_PRF_TLS_1p2 3
#define TLSConstants_PRF_TLS_1p3 4

typedef uint8_t TLSConstants_prePrfAlg_tags;

typedef struct TLSConstants_prePrfAlg_s
{
  TLSConstants_prePrfAlg_tags tag;
  union {
    FStar_Bytes_bytes case_PRF_TLS_1p01;
    struct 
    {
      FStar_Bytes_bytes _0;
      Spec_Hash_Definitions_hash_alg _1;
    }
    case_PRF_TLS_1p2;
  }
  val;
}
TLSConstants_prePrfAlg;

bool TLSConstants_uu___is_PRF_SSL3_nested(TLSConstants_prePrfAlg projectee);

bool TLSConstants_uu___is_PRF_SSL3_concat(TLSConstants_prePrfAlg projectee);

bool TLSConstants_uu___is_PRF_TLS_1p01(TLSConstants_prePrfAlg projectee);

FStar_Bytes_bytes
TLSConstants___proj__PRF_TLS_1p01__item___0(TLSConstants_prePrfAlg projectee);

bool TLSConstants_uu___is_PRF_TLS_1p2(TLSConstants_prePrfAlg projectee);

FStar_Bytes_bytes TLSConstants___proj__PRF_TLS_1p2__item___0(TLSConstants_prePrfAlg projectee);

Spec_Hash_Definitions_hash_alg
TLSConstants___proj__PRF_TLS_1p2__item___1(TLSConstants_prePrfAlg projectee);

bool TLSConstants_uu___is_PRF_TLS_1p3(TLSConstants_prePrfAlg projectee);

typedef TLSConstants_prePrfAlg TLSConstants_kefAlg_t;

typedef TLSConstants_prePrfAlg TLSConstants_kdfAlg_t;

typedef struct K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite__s
{
  Parsers_ProtocolVersion_protocolVersion fst;
  CipherSuite_cipherSuite_ snd;
}
K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite_;

typedef K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite_
TLSConstants_vdAlg_t;

typedef struct FStar_Pervasives_Native_option__Spec_Hash_Definitions_hash_alg_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Spec_Hash_Definitions_hash_alg v;
}
FStar_Pervasives_Native_option__Spec_Hash_Definitions_hash_alg;

FStar_Pervasives_Native_option__Spec_Hash_Definitions_hash_alg
TLSConstants_prfMacAlg_of_ciphersuite_aux(CipherSuite_cipherSuite_ uu___9_782);

bool
FStar_Pervasives_Native_uu___is_Some__Spec_Hash_Definitions_hash_alg(
  FStar_Pervasives_Native_option__Spec_Hash_Definitions_hash_alg projectee
);

/*
 Determine if the tuple PV and CS is the correct association with PRF 
*/
bool
TLSConstants_pvcs(Parsers_ProtocolVersion_protocolVersion pv, CipherSuite_cipherSuite_ cs);

Spec_Hash_Definitions_hash_alg
TLSConstants_prfMacAlg_of_ciphersuite(CipherSuite_cipherSuite_ x);

Spec_Hash_Definitions_hash_alg
TLSConstants_verifyDataHashAlg_of_ciphersuite(CipherSuite_cipherSuite_ x);

FStar_Pervasives_Native_option__Spec_Hash_Definitions_hash_alg
TLSConstants_verifyDataHashAlg_of_ciphersuitename(Parsers_CipherSuite_cipherSuite n1);

Hashing_Spec_tls_alg
TLSConstants_sessionHashAlg(
  Parsers_ProtocolVersion_protocolVersion pv,
  CipherSuite_cipherSuite_ cs
);

CipherSuite_aeAlg TLSConstants_get_aeAlg(CipherSuite_cipherSuite_ cs);

typedef struct K___CipherSuite_encAlg_CipherSuite_ivMode_s
{
  CipherSuite_encAlg fst;
  CipherSuite_ivMode snd;
}
K___CipherSuite_encAlg_CipherSuite_ivMode;

K___CipherSuite_encAlg_CipherSuite_ivMode
TLSConstants_encAlg_of_aeAlg(Parsers_ProtocolVersion_protocolVersion pv, CipherSuite_aeAlg ae);

Spec_Hash_Definitions_hash_alg
TLSConstants_macAlg_of_aeAlg(Parsers_ProtocolVersion_protocolVersion pv, CipherSuite_aeAlg ae);

#define TLSConstants_RSA_sign 0
#define TLSConstants_DSA_sign 1
#define TLSConstants_RSA_fixed_dh 2
#define TLSConstants_DSA_fixed_dh 3

typedef uint8_t TLSConstants_certType;

bool TLSConstants_uu___is_RSA_sign(TLSConstants_certType projectee);

bool TLSConstants_uu___is_DSA_sign(TLSConstants_certType projectee);

bool TLSConstants_uu___is_RSA_fixed_dh(TLSConstants_certType projectee);

bool TLSConstants_uu___is_DSA_fixed_dh(TLSConstants_certType projectee);

FStar_Bytes_bytes TLSConstants_certTypeBytes(TLSConstants_certType ct);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_TLSConstants_certType_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    TLSConstants_certType case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_TLSConstants_certType;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_TLSConstants_certType
TLSError_fatal__TLSConstants_certType(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_TLSConstants_certType
TLSConstants_parseCertType(FStar_Bytes_bytes b);

typedef struct Prims_list__TLSConstants_certType_s Prims_list__TLSConstants_certType;

typedef struct Prims_list__TLSConstants_certType_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  TLSConstants_certType hd;
  Prims_list__TLSConstants_certType *tl;
}
Prims_list__TLSConstants_certType;

FStar_Bytes_bytes
TLSConstants_certificateTypeListBytes(Prims_list__TLSConstants_certType *ctl);

Prims_list__TLSConstants_certType
*TLSConstants_parseCertificateTypeList(FStar_Bytes_bytes data);

Prims_list__TLSConstants_certType
*TLSConstants_defaultCertTypes(bool sign, CipherSuite_cipherSuite_ cs);

typedef Prims_string TLSConstants_dn;

typedef struct Prims_list__Prims_string_s Prims_list__Prims_string;

typedef struct Prims_list__Prims_string_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  Prims_string hd;
  Prims_list__Prims_string *tl;
}
Prims_list__Prims_string;

FStar_Bytes_bytes TLSConstants_distinguishedNameListBytes(Prims_list__Prims_string *names);

typedef struct
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Prims_string_s
{
  FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_K___FStar_Bytes_bytes_FStar_Bytes_bytes_tags
  tag;
  union {
    K___Parsers_Alert_alert_Prims_string case_Error;
    Prims_list__Prims_string *case_Correct;
  }
  val;
}
FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Prims_string;

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Prims_string
TLSError_fatal__Prims_list_Prims_string(
  Parsers_AlertDescription_alertDescription a,
  Prims_string s
);

FStar_Error_optResult__K___Parsers_Alert_alert_Prims_string_Prims_list__Prims_string
TLSConstants_parseDistinguishedNameList(FStar_Bytes_bytes data, Prims_list__Prims_string *res);

typedef struct K___Prims_int_FStar_Bytes_bytes_s
{
  Prims_int fst;
  FStar_Bytes_bytes snd;
}
K___Prims_int_FStar_Bytes_bytes;

#define TLSConstants_SNI_DNS 0
#define TLSConstants_SNI_UNKNOWN 1

typedef uint8_t TLSConstants_serverName_tags;

typedef struct TLSConstants_serverName_s
{
  TLSConstants_serverName_tags tag;
  union {
    FStar_Bytes_bytes case_SNI_DNS;
    K___Prims_int_FStar_Bytes_bytes case_SNI_UNKNOWN;
  }
  val;
}
TLSConstants_serverName;

bool TLSConstants_uu___is_SNI_DNS(TLSConstants_serverName projectee);

FStar_Bytes_bytes TLSConstants___proj__SNI_DNS__item___0(TLSConstants_serverName projectee);

bool TLSConstants_uu___is_SNI_UNKNOWN(TLSConstants_serverName projectee);

K___Prims_int_FStar_Bytes_bytes
TLSConstants___proj__SNI_UNKNOWN__item___0(TLSConstants_serverName projectee);

typedef FStar_Bytes_bytes TLSConstants_alpn_entry;

typedef struct Prims_list__FStar_Bytes_bytes_s Prims_list__FStar_Bytes_bytes;

typedef struct Prims_list__FStar_Bytes_bytes_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  FStar_Bytes_bytes hd;
  Prims_list__FStar_Bytes_bytes *tl;
}
Prims_list__FStar_Bytes_bytes;

typedef Prims_list__FStar_Bytes_bytes *TLSConstants_alpn;

typedef FStar_Bytes_bytes TLSConstants_psk_identifier;

typedef struct TLSConstants_pskInfo_s
{
  FStar_Pervasives_Native_option__FStar_Bytes_bytes ticket_nonce;
  uint32_t time_created;
  uint32_t ticket_age_add;
  bool allow_early_data;
  bool allow_dhe_resumption;
  bool allow_psk_resumption;
  EverCrypt_aead_alg early_ae;
  Spec_Hash_Definitions_hash_alg early_hash;
  K___FStar_Bytes_bytes_FStar_Bytes_bytes identities;
}
TLSConstants_pskInfo;

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSConstants___proj__MkpskInfo__item__ticket_nonce(TLSConstants_pskInfo projectee);

uint32_t TLSConstants___proj__MkpskInfo__item__time_created(TLSConstants_pskInfo projectee);

uint32_t TLSConstants___proj__MkpskInfo__item__ticket_age_add(TLSConstants_pskInfo projectee);

bool TLSConstants___proj__MkpskInfo__item__allow_early_data(TLSConstants_pskInfo projectee);

bool
TLSConstants___proj__MkpskInfo__item__allow_dhe_resumption(TLSConstants_pskInfo projectee);

bool
TLSConstants___proj__MkpskInfo__item__allow_psk_resumption(TLSConstants_pskInfo projectee);

EverCrypt_aead_alg
TLSConstants___proj__MkpskInfo__item__early_ae(TLSConstants_pskInfo projectee);

Spec_Hash_Definitions_hash_alg
TLSConstants___proj__MkpskInfo__item__early_hash(TLSConstants_pskInfo projectee);

K___FStar_Bytes_bytes_FStar_Bytes_bytes
TLSConstants___proj__MkpskInfo__item__identities(TLSConstants_pskInfo projectee);

typedef struct K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite__bool_s
{
  Parsers_ProtocolVersion_protocolVersion fst;
  CipherSuite_cipherSuite_ snd;
  bool thd;
}
K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite__bool;

#define TLSConstants_TicketInfo_12 0
#define TLSConstants_TicketInfo_13 1

typedef uint8_t TLSConstants_ticketInfo_tags;

typedef struct TLSConstants_ticketInfo_s
{
  TLSConstants_ticketInfo_tags tag;
  union {
    K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite__bool case_TicketInfo_12;
    TLSConstants_pskInfo case_TicketInfo_13;
  }
  val;
}
TLSConstants_ticketInfo;

bool TLSConstants_uu___is_TicketInfo_12(TLSConstants_ticketInfo projectee);

K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite__bool
TLSConstants___proj__TicketInfo_12__item___0(TLSConstants_ticketInfo projectee);

bool TLSConstants_uu___is_TicketInfo_13(TLSConstants_ticketInfo projectee);

TLSConstants_pskInfo
TLSConstants___proj__TicketInfo_13__item___0(TLSConstants_ticketInfo projectee);

typedef FStar_Bytes_bytes TLSConstants_ticket_seal;

typedef void
(*TLSConstants_ticket_cb_fun)(
  FStar_Dyn_dyn x0,
  Prims_string x1,
  FStar_Bytes_bytes x2,
  TLSConstants_ticketInfo x3,
  FStar_Bytes_bytes x4
);

typedef struct TLSConstants_ticket_cb_s
{
  FStar_Dyn_dyn ticket_context;
  void
  (*new_ticket)(
    FStar_Dyn_dyn x0,
    Prims_string x1,
    FStar_Bytes_bytes x2,
    TLSConstants_ticketInfo x3,
    FStar_Bytes_bytes x4
  );
}
TLSConstants_ticket_cb;

FStar_Dyn_dyn
TLSConstants___proj__Mkticket_cb__item__ticket_context(TLSConstants_ticket_cb projectee);

void
(*TLSConstants___proj__Mkticket_cb__item__new_ticket(TLSConstants_ticket_cb projectee))(
  FStar_Dyn_dyn x0,
  Prims_string x1,
  FStar_Bytes_bytes x2,
  TLSConstants_ticketInfo x3,
  FStar_Bytes_bytes x4
);

typedef K___uint16_t_FStar_Bytes_bytes TLSConstants_custom_extension;

typedef struct Prims_list__K___uint16_t_FStar_Bytes_bytes_s
Prims_list__K___uint16_t_FStar_Bytes_bytes;

typedef struct Prims_list__K___uint16_t_FStar_Bytes_bytes_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  K___uint16_t_FStar_Bytes_bytes hd;
  Prims_list__K___uint16_t_FStar_Bytes_bytes *tl;
}
Prims_list__K___uint16_t_FStar_Bytes_bytes;

typedef Prims_list__K___uint16_t_FStar_Bytes_bytes *TLSConstants_custom_extensions;

Prims_list__K___uint16_t_FStar_Bytes_bytes *TLSConstants_empty_custom_extensions();

Prims_list__K___uint16_t_FStar_Bytes_bytes
*TLSConstants_add_custom_extension(
  Prims_list__K___uint16_t_FStar_Bytes_bytes *l,
  uint16_t hd1,
  FStar_Bytes_bytes b
);

#define TLSConstants_Nego_abort 0
#define TLSConstants_Nego_retry 1
#define TLSConstants_Nego_accept 2

typedef uint8_t TLSConstants_nego_action_tags;

typedef struct TLSConstants_nego_action_s
{
  TLSConstants_nego_action_tags tag;
  union {
    FStar_Bytes_bytes case_Nego_retry;
    Prims_list__K___uint16_t_FStar_Bytes_bytes *case_Nego_accept;
  }
  val;
}
TLSConstants_nego_action;

bool TLSConstants_uu___is_Nego_abort(TLSConstants_nego_action projectee);

bool TLSConstants_uu___is_Nego_retry(TLSConstants_nego_action projectee);

FStar_Bytes_bytes
TLSConstants___proj__Nego_retry__item__cookie_extra(TLSConstants_nego_action projectee);

bool TLSConstants_uu___is_Nego_accept(TLSConstants_nego_action projectee);

Prims_list__K___uint16_t_FStar_Bytes_bytes
*TLSConstants___proj__Nego_accept__item__extra_ext(TLSConstants_nego_action projectee);

typedef TLSConstants_nego_action
(*TLSConstants_nego_cb_fun)(
  FStar_Dyn_dyn x0,
  Parsers_ProtocolVersion_protocolVersion x1,
  FStar_Bytes_bytes x2,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes x3
);

typedef struct TLSConstants_nego_cb_s
{
  FStar_Dyn_dyn nego_context;
  TLSConstants_nego_action
  (*negotiate)(
    FStar_Dyn_dyn x0,
    Parsers_ProtocolVersion_protocolVersion x1,
    FStar_Bytes_bytes x2,
    FStar_Pervasives_Native_option__FStar_Bytes_bytes x3
  );
}
TLSConstants_nego_cb;

FStar_Dyn_dyn
TLSConstants___proj__Mknego_cb__item__nego_context(TLSConstants_nego_cb projectee);

TLSConstants_nego_action
(*TLSConstants___proj__Mknego_cb__item__negotiate(TLSConstants_nego_cb projectee))(
  FStar_Dyn_dyn x0,
  Parsers_ProtocolVersion_protocolVersion x1,
  FStar_Bytes_bytes x2,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes x3
);

typedef FStar_Bytes_bytes TLSConstants_cert_repr;

typedef uint64_t TLSConstants_cert_type;

typedef struct K___uint64_t_Parsers_SignatureScheme_signatureScheme_s
{
  uint64_t fst;
  Parsers_SignatureScheme_signatureScheme snd;
}
K___uint64_t_Parsers_SignatureScheme_signatureScheme;

typedef struct
FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  K___uint64_t_Parsers_SignatureScheme_signatureScheme v;
}
FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme;

typedef struct TLSConstants_cert_cb_s
{
  FStar_Dyn_dyn app_context;
  FStar_Dyn_dyn cert_select_ptr;
  FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
  (*cert_select_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    Parsers_ProtocolVersion_protocolVersion x2,
    FStar_Bytes_bytes x3,
    FStar_Bytes_bytes x4,
    Prims_list__Parsers_SignatureScheme_signatureScheme *x5
  );
  FStar_Dyn_dyn cert_format_ptr;
  Prims_list__FStar_Bytes_bytes
  *(*cert_format_cb)(FStar_Dyn_dyn x0, FStar_Dyn_dyn x1, uint64_t x2);
  FStar_Dyn_dyn cert_sign_ptr;
  FStar_Pervasives_Native_option__FStar_Bytes_bytes
  (*cert_sign_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    uint64_t x2,
    Parsers_SignatureScheme_signatureScheme x3,
    FStar_Bytes_bytes x4
  );
  FStar_Dyn_dyn cert_verify_ptr;
  bool
  (*cert_verify_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    Prims_list__FStar_Bytes_bytes *x2,
    Parsers_SignatureScheme_signatureScheme x3,
    FStar_Bytes_bytes x4,
    FStar_Bytes_bytes x5
  );
}
TLSConstants_cert_cb;

TLSConstants_cert_cb
TLSConstants_mk_cert_cb(
  FStar_Dyn_dyn app_ctx,
  FStar_Dyn_dyn cert_select_ptr,
  FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
  (*cert_select_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    Parsers_ProtocolVersion_protocolVersion x2,
    FStar_Bytes_bytes x3,
    FStar_Bytes_bytes x4,
    Prims_list__Parsers_SignatureScheme_signatureScheme *x5
  ),
  FStar_Dyn_dyn cert_format_ptr,
  Prims_list__FStar_Bytes_bytes
  *(*cert_format_cb)(FStar_Dyn_dyn x0, FStar_Dyn_dyn x1, uint64_t x2),
  FStar_Dyn_dyn cert_sign_ptr,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes
  (*cert_sign_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    uint64_t x2,
    Parsers_SignatureScheme_signatureScheme x3,
    FStar_Bytes_bytes x4
  ),
  FStar_Dyn_dyn cert_verify_ptr,
  bool
  (*cert_verify_cb)(
    FStar_Dyn_dyn x0,
    FStar_Dyn_dyn x1,
    Prims_list__FStar_Bytes_bytes *x2,
    Parsers_SignatureScheme_signatureScheme x3,
    FStar_Bytes_bytes x4,
    FStar_Bytes_bytes x5
  )
);

typedef struct Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes_s
Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes;

typedef struct Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes_s
{
  Prims_list__Parsers_NamedGroup_namedGroup_tags tag;
  K___FStar_Bytes_bytes_FStar_Bytes_bytes hd;
  Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes *tl;
}
Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes;

typedef struct FStar_Pervasives_Native_option__uint32_t_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  uint32_t v;
}
FStar_Pervasives_Native_option__uint32_t;

typedef struct FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes_s
{
  FStar_Pervasives_Native_option__Prims_string_tags tag;
  Prims_list__FStar_Bytes_bytes *v;
}
FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes;

typedef struct TLSConstants_config_s
{
  Parsers_ProtocolVersion_protocolVersion min_version;
  Parsers_ProtocolVersion_protocolVersion max_version;
  bool is_quic;
  Prims_list__CipherSuite_cipherSuite_ *cipher_suites;
  Prims_list__Parsers_NamedGroup_namedGroup *named_groups;
  Prims_list__Parsers_SignatureScheme_signatureScheme *signature_algorithms;
  bool hello_retry;
  Prims_list__Parsers_NamedGroup_namedGroup *offer_shares;
  Prims_list__K___uint16_t_FStar_Bytes_bytes *custom_extensions;
  Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes *use_tickets;
  FStar_Pervasives_Native_option__FStar_Bytes_bytes send_ticket;
  bool check_client_version_in_pms_for_old_tls;
  bool request_client_certificate;
  bool non_blocking_read;
  FStar_Pervasives_Native_option__uint32_t max_early_data;
  uint32_t max_ticket_age;
  bool safe_renegotiation;
  bool extended_master_secret;
  bool enable_tickets;
  TLSConstants_ticket_cb ticket_callback;
  TLSConstants_nego_cb nego_callback;
  TLSConstants_cert_cb cert_callbacks;
  FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes alpn;
  FStar_Pervasives_Native_option__FStar_Bytes_bytes peer_name;
}
TLSConstants_config;

Parsers_ProtocolVersion_protocolVersion
TLSConstants___proj__Mkconfig__item__min_version(TLSConstants_config projectee);

Parsers_ProtocolVersion_protocolVersion
TLSConstants___proj__Mkconfig__item__max_version(TLSConstants_config projectee);

bool TLSConstants___proj__Mkconfig__item__is_quic(TLSConstants_config projectee);

Prims_list__CipherSuite_cipherSuite_
*TLSConstants___proj__Mkconfig__item__cipher_suites(TLSConstants_config projectee);

Prims_list__Parsers_NamedGroup_namedGroup
*TLSConstants___proj__Mkconfig__item__named_groups(TLSConstants_config projectee);

Prims_list__Parsers_SignatureScheme_signatureScheme
*TLSConstants___proj__Mkconfig__item__signature_algorithms(TLSConstants_config projectee);

bool TLSConstants___proj__Mkconfig__item__hello_retry(TLSConstants_config projectee);

Prims_list__Parsers_NamedGroup_namedGroup
*TLSConstants___proj__Mkconfig__item__offer_shares(TLSConstants_config projectee);

Prims_list__K___uint16_t_FStar_Bytes_bytes
*TLSConstants___proj__Mkconfig__item__custom_extensions(TLSConstants_config projectee);

Prims_list__K___FStar_Bytes_bytes_FStar_Bytes_bytes
*TLSConstants___proj__Mkconfig__item__use_tickets(TLSConstants_config projectee);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSConstants___proj__Mkconfig__item__send_ticket(TLSConstants_config projectee);

bool
TLSConstants___proj__Mkconfig__item__check_client_version_in_pms_for_old_tls(
  TLSConstants_config projectee
);

bool
TLSConstants___proj__Mkconfig__item__request_client_certificate(TLSConstants_config projectee);

bool TLSConstants___proj__Mkconfig__item__non_blocking_read(TLSConstants_config projectee);

FStar_Pervasives_Native_option__uint32_t
TLSConstants___proj__Mkconfig__item__max_early_data(TLSConstants_config projectee);

uint32_t TLSConstants___proj__Mkconfig__item__max_ticket_age(TLSConstants_config projectee);

bool TLSConstants___proj__Mkconfig__item__safe_renegotiation(TLSConstants_config projectee);

bool
TLSConstants___proj__Mkconfig__item__extended_master_secret(TLSConstants_config projectee);

bool TLSConstants___proj__Mkconfig__item__enable_tickets(TLSConstants_config projectee);

TLSConstants_ticket_cb
TLSConstants___proj__Mkconfig__item__ticket_callback(TLSConstants_config projectee);

TLSConstants_nego_cb
TLSConstants___proj__Mkconfig__item__nego_callback(TLSConstants_config projectee);

TLSConstants_cert_cb
TLSConstants___proj__Mkconfig__item__cert_callbacks(TLSConstants_config projectee);

FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes
TLSConstants___proj__Mkconfig__item__alpn(TLSConstants_config projectee);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSConstants___proj__Mkconfig__item__peer_name(TLSConstants_config projectee);

FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
TLSConstants_cert_select_cb(
  TLSConstants_config c,
  Parsers_ProtocolVersion_protocolVersion pv,
  FStar_Bytes_bytes sni,
  FStar_Bytes_bytes alpn,
  Prims_list__Parsers_SignatureScheme_signatureScheme *sig_6933
);

Prims_list__FStar_Bytes_bytes *TLSConstants_cert_format_cb(TLSConstants_config c, uint64_t ct);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSConstants_cert_sign_cb(
  TLSConstants_config c,
  uint64_t ct,
  Parsers_SignatureScheme_signatureScheme ss,
  FStar_Bytes_bytes tbs
);

bool
TLSConstants_cert_verify_cb(
  TLSConstants_config c,
  Prims_list__FStar_Bytes_bytes *cl,
  Parsers_SignatureScheme_signatureScheme ss,
  FStar_Bytes_bytes tbs,
  FStar_Bytes_bytes sigv
);

typedef FStar_Bytes_bytes TLSConstants_cVerifyData;

typedef FStar_Bytes_bytes TLSConstants_sVerifyData;

#define __TLSConstants_H_DEFINED
#endif
