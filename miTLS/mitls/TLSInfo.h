/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: D:\everest\kremlin\_build\src\Kremlin.native -minimal -add-include "kremlib.h" -fnoanonymous-unions -warn-error -9-7-6@4-14-15 -fsopts --debug,yes -verbose -library EverCrypt,EverCrypt.*,Hacl.*,Interop_assumptions,Check_sha_stdcall,Sha_update_bytes_stdcall,Check_aesni_stdcall -drop MonotoneMap -drop MonotoneMapNonDep -drop FStar.Tactics.\* -drop FStar.Tactics -drop Crypto.AEAD.\* -drop Crypto.HKDF -drop Crypto.HMAC -add-include "hacks.h" -add-include "kremlin/internal/compat.h" -bundle LowParse.\*,LowParseWrappers[rename=LowParse] -bundle Format.\* -bundle EverCrypt=EverCrypt,EverCrypt.\* -bundle FStar.\*,LowStar.\*,C,C.\*[rename=Mitls_Kremlib] -bundle Parsers.\* -bundle Spec.\* -bundle Meta.\* -bundle Lib.*[rename=Hacl_Lib] -bundle Hacl.\* -bundle KDF.\*,KDF,Idx,IV,Pkg,Pkg.\*[rename=Pkg] -bundle TLSConstants=TLSConstants,QD.TLS_protocolVersion,List.Helpers -bundle Hashing=Hashing.Spec,Hashing,Hashing.CRF,HMAC,HKDF,HMAC.UFCMA -bundle Old.Handshake=Old.HMAC.UFCMA,Old.Epochs,Old.KeySchedule,Old.Handshake -bundle StatefulLHAE=AEAD_GCM,LHAEPlain,StatefulPlain,StatefulLHAE -bundle StreamAE=StreamPlain,StreamAE -bundle CommonDH=TLS.Curve25519,DHGroup,ECGroup,CommonDH -bundle Content=Content,DataStream -bundle Record=Record,StAE,Transport,StreamDeltas -bundle PMS=PMS,RSAKey,TLSPRF -bundle Crypto.Plain=Buffer.Utils,Crypto.Indexing,Crypto.Plain,Crypto.Symmetric.Bytes -bundle Flags=DebugFlags,Flags,Flag,TLSInfoFlags -bundle Vale.Stdcalls.*,Vale.Interop,Vale.Interop.*,Vale.Wrapper.X64.*[rename=Vale] -bundle Vale.Inline.X64.*[rename=Vale_Inline] -bundle Vale.*[rename=Unused2] -ldopts -L,D:/everest/MLCrypto/openssl,-lcrypto,-lssl extract/Kremlin/FStar_Pervasives_Native.krml extract/Kremlin/FStar_Pervasives.krml extract/Kremlin/FStar_Squash.krml extract/Kremlin/FStar_Classical.krml extract/Kremlin/FStar_Preorder.krml extract/Kremlin/FStar_Calc.krml extract/Kremlin/FStar_Mul.krml extract/Kremlin/FStar_Math_Lib.krml extract/Kremlin/FStar_Math_Lemmas.krml extract/Kremlin/FStar_StrongExcludedMiddle.krml extract/Kremlin/FStar_FunctionalExtensionality.krml extract/Kremlin/FStar_List_Tot_Base.krml extract/Kremlin/FStar_List_Tot_Properties.krml extract/Kremlin/FStar_List_Tot.krml extract/Kremlin/FStar_Seq_Base.krml extract/Kremlin/FStar_Seq_Properties.krml extract/Kremlin/FStar_Seq.krml extract/Kremlin/FStar_BitVector.krml extract/Kremlin/FStar_UInt.krml extract/Kremlin/FStar_UInt32.krml extract/Kremlin/FStar_UInt8.krml extract/Kremlin/FStar_Exn.krml extract/Kremlin/FStar_Set.krml extract/Kremlin/FStar_Monotonic_Witnessed.krml extract/Kremlin/FStar_Ghost.krml extract/Kremlin/FStar_ErasedLogic.krml extract/Kremlin/FStar_PropositionalExtensionality.krml extract/Kremlin/FStar_PredicateExtensionality.krml extract/Kremlin/FStar_TSet.krml extract/Kremlin/FStar_Monotonic_Heap.krml extract/Kremlin/FStar_Heap.krml extract/Kremlin/FStar_ST.krml extract/Kremlin/FStar_All.krml extract/Kremlin/Lib_LoopCombinators.krml extract/Kremlin/FStar_Int.krml extract/Kremlin/FStar_Int64.krml extract/Kremlin/FStar_Int63.krml extract/Kremlin/FStar_Int32.krml extract/Kremlin/FStar_Int16.krml extract/Kremlin/FStar_Int8.krml extract/Kremlin/FStar_UInt64.krml extract/Kremlin/FStar_UInt63.krml extract/Kremlin/FStar_UInt16.krml extract/Kremlin/FStar_Int_Cast.krml extract/Kremlin/FStar_UInt128.krml extract/Kremlin/FStar_Int_Cast_Full.krml extract/Kremlin/FStar_Int128.krml extract/Kremlin/Lib_IntTypes.krml extract/Kremlin/Lib_RawIntTypes.krml extract/Kremlin/Lib_Sequence.krml extract/Kremlin/Lib_ByteSequence.krml extract/Kremlin/Spec_Chacha20.krml extract/Kremlin/Meta_Attribute.krml extract/Kremlin/FStar_Map.krml extract/Kremlin/FStar_Monotonic_HyperHeap.krml extract/Kremlin/FStar_Monotonic_HyperStack.krml extract/Kremlin/FStar_HyperStack.krml extract/Kremlin/FStar_HyperStack_ST.krml extract/Kremlin/FStar_Universe.krml extract/Kremlin/FStar_GSet.krml extract/Kremlin/FStar_ModifiesGen.krml extract/Kremlin/FStar_Range.krml extract/Kremlin/FStar_Reflection_Types.krml extract/Kremlin/FStar_Tactics_Types.krml extract/Kremlin/FStar_Tactics_Result.krml extract/Kremlin/FStar_Tactics_Effect.krml extract/Kremlin/FStar_Reflection_Data.krml extract/Kremlin/FStar_Tactics_Builtins.krml extract/Kremlin/FStar_Reflection_Const.krml extract/Kremlin/FStar_Char.krml extract/Kremlin/FStar_List.krml extract/Kremlin/FStar_String.krml extract/Kremlin/FStar_Order.krml extract/Kremlin/FStar_Reflection_Basic.krml extract/Kremlin/FStar_Reflection_Derived.krml extract/Kremlin/FStar_Reflection_Derived_Lemmas.krml extract/Kremlin/FStar_Reflection.krml extract/Kremlin/FStar_Tactics_SyntaxHelpers.krml extract/Kremlin/FStar_Tactics_Util.krml extract/Kremlin/FStar_Reflection_Formula.krml extract/Kremlin/FStar_Tactics_Derived.krml extract/Kremlin/FStar_Tactics_Logic.krml extract/Kremlin/FStar_Tactics.krml extract/Kremlin/FStar_BigOps.krml extract/Kremlin/LowStar_Monotonic_Buffer.krml extract/Kremlin/LowStar_Buffer.krml extract/Kremlin/LowStar_BufferOps.krml extract/Kremlin/Spec_Loops.krml extract/Kremlin/C_Loops.krml extract/Kremlin/Lib_Loops.krml extract/Kremlin/FStar_Endianness.krml extract/Kremlin/LowStar_Endianness.krml extract/Kremlin/LowStar_ImmutableBuffer.krml extract/Kremlin/Lib_Buffer.krml extract/Kremlin/Lib_ByteBuffer.krml extract/Kremlin/FStar_HyperStack_All.krml extract/Kremlin/Lib_IntVector_Intrinsics.krml extract/Kremlin/Spec_GaloisField.krml extract/Kremlin/Spec_AES.krml extract/Kremlin/Lib_IntVector.krml extract/Kremlin/Hacl_Spec_Chacha20_Vec.krml extract/Kremlin/Hacl_Spec_Chacha20_Lemmas.krml extract/Kremlin/Lib_Sequence_Lemmas.krml extract/Kremlin/Hacl_Spec_Chacha20_Equiv.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32xN.krml extract/Kremlin/Hacl_Impl_Chacha20_Vec.krml extract/Kremlin/Vale_Lib_Seqs_s.krml extract/Kremlin/Vale_Def_Words_s.krml extract/Kremlin/Vale_Def_Words_Four_s.krml extract/Kremlin/Vale_Def_Words_Two_s.krml extract/Kremlin/Vale_Def_Words_Seq_s.krml extract/Kremlin/Vale_Def_Opaque_s.krml extract/Kremlin/Vale_Def_Types_s.krml extract/Kremlin/Vale_X64_Machine_s.krml extract/Kremlin/Vale_Lib_Map16.krml extract/Kremlin/Vale_Def_Prop_s.krml extract/Kremlin/Vale_X64_Flags.krml extract/Kremlin/Vale_X64_CPU_Features_s.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_internal.krml extract/Kremlin/Vale_Lib_Meta.krml extract/Kremlin/Vale_Def_Words_Two.krml extract/Kremlin/Vale_Lib_Seqs.krml extract/Kremlin/Vale_Def_TypesNative_s.krml extract/Kremlin/Vale_Arch_TypesNative.krml extract/Kremlin/Vale_Def_Words_Seq.krml extract/Kremlin/Vale_Arch_Types.krml extract/Kremlin/Vale_Curve25519_Fast_defs.krml extract/Kremlin/FStar_Algebra_CommMonoid.krml extract/Kremlin/FStar_Tactics_CanonCommSemiring.krml extract/Kremlin/Vale_Curve25519_FastUtil_helpers.krml extract/Kremlin/Vale_Curve25519_FastHybrid_helpers.krml extract/Kremlin/Vale_Curve25519_Fast_lemmas_external.krml extract/Kremlin/Vale_X64_Regs.krml extract/Kremlin/FStar_Float.krml extract/Kremlin/FStar_IO.krml extract/Kremlin/Vale_Def_PossiblyMonad.krml extract/Kremlin/LowStar_BufferView_Down.krml extract/Kremlin/LowStar_BufferView_Up.krml extract/Kremlin/Vale_Interop_Views.krml extract/Kremlin/FStar_Option.krml extract/Kremlin/Vale_Lib_Set.krml extract/Kremlin/Vale_X64_Instruction_s.krml extract/Kremlin/Vale_X64_Bytes_Code_s.krml extract/Kremlin/Vale_AES_AES_s.krml extract/Kremlin/Vale_Math_Poly2_Defs_s.krml extract/Kremlin/Vale_Math_Poly2_s.krml extract/Kremlin/Vale_Math_Poly2_Bits_s.krml extract/Kremlin/Spec_Hash_Definitions.krml extract/Kremlin/Spec_Hash_Lemmas0.krml extract/Kremlin/Spec_Hash_PadFinish.krml extract/Kremlin/Spec_SHA2_Constants.krml extract/Kremlin/Spec_SHA2.krml extract/Kremlin/Vale_X64_CryptoInstructions_s.krml extract/Kremlin/Vale_X64_Instructions_s.krml extract/Kremlin/Vale_Arch_HeapTypes_s.krml extract/Kremlin/Vale_Interop_Types.krml extract/Kremlin/Vale_Arch_MachineHeap_s.krml extract/Kremlin/Vale_Interop_Heap_s.krml extract/Kremlin/LowStar_Modifies.krml extract/Kremlin/LowStar_ModifiesPat.krml extract/Kremlin/LowStar_BufferView.krml extract/Kremlin/Vale_Lib_BufferViewHelpers.krml extract/Kremlin/Vale_Interop.krml extract/Kremlin/Vale_Arch_HeapImpl.krml extract/Kremlin/Vale_Arch_Heap.krml extract/Kremlin/Vale_X64_Machine_Semantics_s.krml extract/Kremlin/Vale_Interop_Base.krml extract/Kremlin/Vale_X64_Memory.krml extract/Kremlin/Vale_Arch_MachineHeap.krml extract/Kremlin/Vale_X64_Stack_i.krml extract/Kremlin/Vale_X64_Stack_Sems.krml extract/Kremlin/Vale_X64_BufferViewStore.krml extract/Kremlin/Vale_X64_Memory_Sems.krml extract/Kremlin/Vale_X64_State.krml extract/Kremlin/Vale_X64_StateLemmas.krml extract/Kremlin/Vale_X64_Lemmas.krml extract/Kremlin/Vale_X64_Print_s.krml extract/Kremlin/Vale_X64_Decls.krml extract/Kremlin/Vale_X64_QuickCode.krml extract/Kremlin/Vale_X64_QuickCodes.krml extract/Kremlin/Vale_X64_Taint_Semantics.krml extract/Kremlin/Vale_X64_InsLemmas.krml extract/Kremlin/Vale_X64_InsBasic.krml extract/Kremlin/Vale_X64_InsMem.krml extract/Kremlin/Vale_X64_InsVector.krml extract/Kremlin/Vale_X64_InsStack.krml extract/Kremlin/Vale_Curve25519_X64_FastHybrid.krml extract/Kremlin/Vale_Bignum_Defs.krml extract/Kremlin/Vale_Bignum_X64.krml extract/Kremlin/Vale_Curve25519_FastSqr_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastSqr.krml extract/Kremlin/Vale_Curve25519_FastMul_helpers.krml extract/Kremlin/Vale_Curve25519_X64_FastMul.krml extract/Kremlin/Vale_Curve25519_X64_FastWide.krml extract/Kremlin/Vale_Curve25519_X64_FastUtil.krml extract/Kremlin/Vale_X64_MemoryAdapters.krml extract/Kremlin/Vale_Interop_Assumptions.krml extract/Kremlin/Vale_Interop_X64.krml extract/Kremlin/Vale_AsLowStar_ValeSig.krml extract/Kremlin/Vale_AsLowStar_LowStarSig.krml extract/Kremlin/Vale_AsLowStar_MemoryHelpers.krml extract/Kremlin/Vale_AsLowStar_Wrapper.krml extract/Kremlin/Vale_Stdcalls_X64_Fadd.krml extract/Kremlin/Vale_Wrapper_X64_Fadd.krml extract/Kremlin/Spec_SHA1.krml extract/Kremlin/Spec_MD5.krml extract/Kremlin/Spec_Agile_Hash.krml extract/Kremlin/Spec_Hash_Incremental.krml extract/Kremlin/Spec_Hash_Lemmas.krml extract/Kremlin/FStar_Kremlin_Endianness.krml extract/Kremlin/Hacl_Hash_Lemmas.krml extract/Kremlin/Hacl_Hash_Definitions.krml extract/Kremlin/Hacl_Hash_PadFinish.krml extract/Kremlin/Hacl_Hash_MD.krml extract/Kremlin/Spec_SHA2_Lemmas.krml extract/Kremlin/Vale_X64_Stack.krml extract/Kremlin/Vale_SHA_SHA_helpers.krml extract/Kremlin/Vale_X64_InsSha.krml extract/Kremlin/Vale_SHA_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Sha.krml extract/Kremlin/FStar_BV.krml extract/Kremlin/FStar_Reflection_Arith.krml extract/Kremlin/FStar_Tactics_BV.krml extract/Kremlin/Vale_Lib_Bv_s.krml extract/Kremlin/Vale_Math_Bits.krml extract/Kremlin/Vale_Lib_Tactics.krml extract/Kremlin/Vale_Poly1305_Bitvectors.krml extract/Kremlin/Vale_Math_Lemmas_Int.krml extract/Kremlin/FStar_Tactics_Canon.krml extract/Kremlin/Vale_Poly1305_Spec_s.krml extract/Kremlin/Vale_Poly1305_Math.krml extract/Kremlin/Vale_Poly1305_Util.krml extract/Kremlin/Vale_Poly1305_X64.krml extract/Kremlin/Vale_Stdcalls_X64_Poly.krml extract/Kremlin/Vale_Wrapper_X64_Poly.krml extract/Kremlin/Vale_Arch_BufferFriend.krml extract/Kremlin/Vale_SHA_Simplify_Sha.krml extract/Kremlin/Vale_Wrapper_X64_Sha.krml extract/Kremlin/Hacl_Hash_Core_SHA2_Constants.krml extract/Kremlin/Hacl_Hash_Core_SHA2.krml extract/Kremlin/Hacl_Hash_SHA2.krml extract/Kremlin/Hacl_Hash_Core_SHA1.krml extract/Kremlin/Hacl_Hash_SHA1.krml extract/Kremlin/Hacl_Hash_Core_MD5.krml extract/Kremlin/Hacl_Hash_MD5.krml extract/Kremlin/C.krml extract/Kremlin/C_String.krml extract/Kremlin/C_Failure.krml extract/Kremlin/FStar_Int31.krml extract/Kremlin/FStar_UInt31.krml extract/Kremlin/FStar_Integers.krml extract/Kremlin/EverCrypt_StaticConfig.krml extract/Kremlin/EverCrypt_TargetConfig.krml extract/Kremlin/Vale_Lib_Basic.krml extract/Kremlin/Vale_Lib_X64_Cpuid.krml extract/Kremlin/Vale_Lib_X64_Cpuidstdcall.krml extract/Kremlin/Vale_Stdcalls_X64_Cpuid.krml extract/Kremlin/Vale_Wrapper_X64_Cpuid.krml extract/Kremlin/EverCrypt_AutoConfig2.krml extract/Kremlin/EverCrypt_Helpers.krml extract/Kremlin/EverCrypt_Hash.krml extract/Kremlin/Spec_Agile_HMAC.krml extract/Kremlin/Hacl_HMAC.krml extract/Kremlin/EverCrypt_HMAC.krml extract/Kremlin/Declassify.krml extract/Kremlin/FStar_Bytes.krml extract/Kremlin/Hashing_Spec.krml extract/Kremlin/LowParse_Bytes32.krml extract/Kremlin/LowParse_Bytes.krml extract/Kremlin/LowParse_Spec_Base.krml extract/Kremlin/LowParse_SLow_Base.krml extract/Kremlin/LowParse_Spec_Option.krml extract/Kremlin/LowParse_SLow_Option.krml extract/Kremlin/LowParse_Spec_Combinators.krml extract/Kremlin/LowParse_Spec_IfThenElse.krml extract/Kremlin/LowParse_SLow_Combinators.krml extract/Kremlin/LowParse_Spec_List.krml extract/Kremlin/LowParse_SLow_List.krml extract/Kremlin/Spec_Curve25519_Lemmas.krml extract/Kremlin/Spec_Curve25519.krml extract/Kremlin/Hacl_Spec_Curve25519_AddAndDouble.krml extract/Kremlin/Hacl_Impl_Curve25519_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64_Core.krml extract/Kremlin/Hacl_Spec_Curve25519_Field64.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Definition.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51_Lemmas.krml extract/Kremlin/Hacl_Spec_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields_Core.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64.krml extract/Kremlin/Hacl_Impl_Curve25519_Field51.krml extract/Kremlin/Hacl_Impl_Curve25519_Fields.krml extract/Kremlin/Hacl_Impl_Curve25519_AddAndDouble.krml extract/Kremlin/Spec_Poly1305.krml extract/Kremlin/Hacl_Spec_Poly1305_Vec.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Field32xN_Lemmas.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN.krml extract/Kremlin/Hacl_Spec_Poly1305_Lemmas.krml extract/Kremlin/Hacl_Spec_Poly1305_Equiv.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_256.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_128.krml extract/Kremlin/Hacl_Impl_Poly1305_Field32xN_32.krml extract/Kremlin/Hacl_Impl_Poly1305_Fields.krml extract/Kremlin/Hacl_Impl_Poly1305.krml extract/Kremlin/Spec_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305_PolyCore.krml extract/Kremlin/Hacl_Impl_Chacha20Poly1305.krml extract/Kremlin/FStar_List_Pure_Base.krml extract/Kremlin/FStar_List_Pure_Properties.krml extract/Kremlin/FStar_List_Pure.krml extract/Kremlin/Meta_Interface.krml extract/Kremlin/Hacl_Meta_Chacha20Poly1305.krml extract/Kremlin/Hacl_Impl_Chacha20_Core32.krml extract/Kremlin/Hacl_Impl_Chacha20.krml extract/Kremlin/Hacl_Chacha20.krml extract/Kremlin/Hacl_Meta_Poly1305.krml extract/Kremlin/Hacl_Poly1305_32.krml extract/Kremlin/Hacl_Chacha20Poly1305_32.krml extract/Kremlin/FStar_Dyn.krml extract/Kremlin/LowStar_Failure.krml extract/Kremlin/EverCrypt_Vale.krml extract/Kremlin/EverCrypt_Specs.krml extract/Kremlin/EverCrypt_OpenSSL.krml extract/Kremlin/EverCrypt_Hacl.krml extract/Kremlin/EverCrypt_BCrypt.krml extract/Kremlin/EverCrypt_Cipher.krml extract/Kremlin/Hacl_Spec_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Finv.krml extract/Kremlin/Hacl_Impl_Curve25519_Generic.krml extract/Kremlin/Hacl_Meta_Curve25519.krml extract/Kremlin/Hacl_Curve25519_51.krml extract/Kremlin/Vale_Stdcalls_X64_Fswap.krml extract/Kremlin/Vale_Wrapper_X64_Fswap.krml extract/Kremlin/Vale_X64_Print_Inline_s.krml extract/Kremlin/Vale_Inline_X64_Fswap_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsqr.krml extract/Kremlin/Vale_Wrapper_X64_Fsqr.krml extract/Kremlin/Vale_Inline_X64_Fsqr_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fmul.krml extract/Kremlin/Vale_Wrapper_X64_Fmul.krml extract/Kremlin/Vale_Inline_X64_Fmul_inline.krml extract/Kremlin/Vale_Stdcalls_X64_Fsub.krml extract/Kremlin/Vale_Wrapper_X64_Fsub.krml extract/Kremlin/Vale_Inline_X64_Fadd_inline.krml extract/Kremlin/Hacl_Impl_Curve25519_Field64_Vale.krml extract/Kremlin/Hacl_Curve25519_64.krml extract/Kremlin/EverCrypt_Curve25519.krml extract/Kremlin/Hacl_Poly1305_128.krml extract/Kremlin/Hacl_Poly1305_256.krml extract/Kremlin/Vale_Poly1305_Equiv.krml extract/Kremlin/Vale_Poly1305_CallingFromLowStar.krml extract/Kremlin/EverCrypt_Poly1305.krml extract/Kremlin/Lib_Memzero.krml extract/Kremlin/Spec_HMAC_DRBG.krml extract/Kremlin/Hacl_HMAC_DRBG.krml extract/Kremlin/Lib_RandomBuffer_System.krml extract/Kremlin/EverCrypt_DRBG.krml extract/Kremlin/Spec_Agile_HKDF.krml extract/Kremlin/Hacl_HKDF.krml extract/Kremlin/EverCrypt_HKDF.krml extract/Kremlin/EverCrypt.krml extract/Kremlin/FStar_Printf.krml extract/Kremlin/FStar_Error.krml extract/Kremlin/FStar_Tcp.krml extract/Kremlin/LowParse_Spec_FLData.krml extract/Kremlin/LowParse_Math.krml extract/Kremlin/LowParse_Slice.krml extract/Kremlin/LowParse_Low_Base.krml extract/Kremlin/LowParse_Low_Combinators.krml extract/Kremlin/LowParse_Low_FLData.krml extract/Kremlin/LowParse_Spec_Seq.krml extract/Kremlin/LowParse_Spec_Int.krml extract/Kremlin/LowParse_Spec_BoundedInt.krml extract/Kremlin/LowParse_Low_Endianness.krml extract/Kremlin/LowParse_BitFields.krml extract/Kremlin/LowParse_Endianness.krml extract/Kremlin/LowParse_Endianness_BitFields.krml extract/Kremlin/LowParse_Low_BoundedInt.krml extract/Kremlin/LowParse_Spec_SeqBytes_Base.krml extract/Kremlin/LowParse_Spec_DER.krml extract/Kremlin/LowParse_Spec_BCVLI.krml extract/Kremlin/LowParse_Spec_AllIntegers.krml extract/Kremlin/LowParse_Spec_VLData.krml extract/Kremlin/LowParse_Low_VLData.krml extract/Kremlin/LowParse_Spec_VLGen.krml extract/Kremlin/LowParse_Low_VLGen.krml extract/Kremlin/LowParse_Low_Int.krml extract/Kremlin/LowParse_Low_DER.krml extract/Kremlin/LowParse_Low_BCVLI.krml extract/Kremlin/LowParse_Low_List.krml extract/Kremlin/LowParse_Spec_Array.krml extract/Kremlin/LowParse_Spec_VCList.krml extract/Kremlin/LowParse_Low_VCList.krml extract/Kremlin/LowParse_Low_IfThenElse.krml extract/Kremlin/LowParse_TacLib.krml extract/Kremlin/LowParse_Spec_Enum.krml extract/Kremlin/LowParse_Spec_Sum.krml extract/Kremlin/LowParse_Low_Enum.krml extract/Kremlin/LowParse_Low_Sum.krml extract/Kremlin/LowParse_Low_Tac_Sum.krml extract/Kremlin/LowParse_Low_Option.krml extract/Kremlin/LowParse_Spec_Bytes.krml extract/Kremlin/LowParse_Low_Bytes.krml extract/Kremlin/LowParse_Low_Array.krml extract/Kremlin/LowParse_Low.krml extract/Kremlin/LowParse_SLow_FLData.krml extract/Kremlin/LowParse_SLow_VLGen.krml extract/Kremlin/LowParse_Spec_Endianness.krml extract/Kremlin/LowParse_Spec_Endianness_Instances.krml extract/Kremlin/LowParse_SLow_Endianness.krml extract/Kremlin/LowParse_SLow_BoundedInt.krml extract/Kremlin/LowParse_SLow_Int.krml extract/Kremlin/LowParse_SLow_DER.krml extract/Kremlin/LowParse_SLow_BCVLI.krml extract/Kremlin/LowParse_SLow_VCList.krml extract/Kremlin/LowParse_SLow_IfThenElse.krml extract/Kremlin/LowParse_SLow_Enum.krml extract/Kremlin/LowParse_SLow_Sum.krml extract/Kremlin/LowParse_SLow_Tac_Enum.krml extract/Kremlin/LowParse_SLow_Tac_Sum.krml extract/Kremlin/LowParse_SLow_VLData.krml extract/Kremlin/LowParse_SLow_Bytes.krml extract/Kremlin/LowParse_SLow_Array.krml extract/Kremlin/LowParse_Spec_Tac_Combinators.krml extract/Kremlin/LowParse_SLow.krml extract/Kremlin/Parsers_AlertDescription.krml extract/Kremlin/Parsers_AlertLevel.krml extract/Kremlin/Parsers_Alert.krml extract/Kremlin/TLSError.krml extract/Kremlin/Parsers_NamedGroup.krml extract/Kremlin/Format_Constants.krml extract/Kremlin/Format_UncompressedPointRepresentation.krml extract/Kremlin/Format_KeyShareEntry.krml extract/Kremlin/Flags.krml extract/Kremlin/Parsers_ECCurveType.krml extract/Kremlin/DebugFlags.krml extract/Kremlin/FStar_DependentMap.krml extract/Kremlin/FStar_Monotonic_DependentMap.krml extract/Kremlin/Mem.krml extract/Kremlin/Random.krml extract/Kremlin/TLS_Curve25519.krml extract/Kremlin/Parse.krml extract/Kremlin/ECGroup.krml extract/Kremlin/DHGroup.krml extract/Kremlin/Parsers_NamedGroupList.krml extract/Kremlin/CommonDH.krml extract/Kremlin/FFICallbacks.krml extract/Kremlin/Parsers_CompressionMethod.krml extract/Kremlin/Parsers_SignatureScheme.krml extract/Kremlin/Parsers_SignatureSchemeList.krml extract/Kremlin/LowParseWrappers.krml extract/Kremlin/Parsers_CipherSuite.krml extract/Kremlin/CipherSuite.krml extract/Kremlin/Parsers_ProtocolVersion.krml extract/Kremlin/TLSConstants.krml extract/Kremlin/HMAC.krml extract/Kremlin/RSAKey.krml extract/Kremlin/PMS.krml extract/Kremlin/List_Helpers.krml extract/Kremlin/PSK.krml extract/Kremlin/Extensions.krml extract/Kremlin/Cert.krml extract/Kremlin/TLSInfoFlags.krml extract/Kremlin/FStar_Date.krml extract/Kremlin/Nonce.krml extract/Kremlin/TLSInfo.krml extract/Kremlin/Crypto_Indexing.krml extract/Kremlin/Flag.krml extract/Kremlin/FStar_Old_Endianness.krml extract/Kremlin/FStar_Buffer.krml extract/Kremlin/C_Compat_Loops.krml extract/Kremlin/Buffer_Utils.krml extract/Kremlin/Crypto_Symmetric_Bytes.krml extract/Kremlin/Crypto_Plain.krml extract/Kremlin/AEADProvider.krml extract/Kremlin/Range.krml extract/Kremlin/DataStream.krml extract/Kremlin/Alert.krml extract/Kremlin/Content.krml extract/Kremlin/StreamPlain.krml extract/Kremlin/Hashing.krml extract/Kremlin/TLSPRF.krml extract/Kremlin/Hashing_CRF.krml extract/Kremlin/HandshakeMessages.krml extract/Kremlin/HandshakeLog.krml extract/Kremlin/Parsers_Boolean.krml extract/Kremlin/Parsers_TicketContents13_custom_data.krml extract/Kremlin/Parsers_TicketContents13_nonce.krml extract/Kremlin/Parsers_TicketContents13_rms.krml extract/Kremlin/Parsers_TicketContents13.krml extract/Kremlin/Parsers_TicketContents12_master_secret.krml extract/Kremlin/Parsers_TicketContents12.krml extract/Kremlin/Parsers_TicketVersion.krml extract/Kremlin/Parsers_TicketContents.krml extract/Kremlin/Parsers_TicketContents12_master_secret_Low.krml extract/Kremlin/Parsers_Ticket_Low.krml extract/Kremlin/Ticket.krml extract/Kremlin/Negotiation.krml extract/Kremlin/FStar_Monotonic_Seq.krml extract/Kremlin/StreamAE.krml extract/Kremlin/StatefulPlain.krml extract/Kremlin/LHAEPlain.krml extract/Kremlin/AEAD_GCM.krml extract/Kremlin/StatefulLHAE.krml extract/Kremlin/StAE.krml extract/Kremlin/Old_HMAC_UFCMA.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_context.krml extract/Kremlin/Parsers_HKDF_HkdfLabel_label.krml extract/Kremlin/Parsers_HKDF_HkdfLabel.krml extract/Kremlin/HKDF.krml extract/Kremlin/Old_KeySchedule.krml extract/Kremlin/Old_Epochs.krml extract/Kremlin/FStar_HyperStack_IO.krml extract/Kremlin/StreamDeltas.krml extract/Kremlin/Old_Handshake.krml extract/Kremlin/Transport.krml extract/Kremlin/BufferBytes.krml extract/Kremlin/Record.krml extract/Kremlin/Connection.krml extract/Kremlin/TLS.krml extract/Kremlin/FFI.krml extract/Kremlin/Pkg.krml extract/Kremlin/Idx.krml extract/Kremlin/Model.krml extract/Kremlin/FStar_Test.krml extract/Kremlin/Pkg_Tree.krml extract/Kremlin/KDF.krml extract/Kremlin/QUIC.krml extract/Kremlin/IV.krml extract/Kremlin/KDF_Rekey.krml -tmpdir extract/Kremlin-Library -skip-compilation
  F* version: 1f9505d5
  KreMLin version: 44acff92
 */
#include "kremlib.h"
#include "hacks.h"
#include "kremlin/internal/compat.h"

#ifndef __TLSInfo_H
#define __TLSInfo_H

#include "Spec.h"
#include "Parsers.h"
#include "EverCrypt.h"
#include "PMS.h"
#include "Mitls_Kremlib.h"
#include "PSK.h"
#include "CipherSuite.h"
#include "Extensions.h"
#include "CommonDH.h"
#include "Hashing.h"
#include "TLSConstants.h"


extern Prims_list__Parsers_CipherSuite_cipherSuite *TLSInfo_default_cipherSuites;

extern Prims_list__Parsers_SignatureScheme_signatureScheme *TLSInfo_default_signature_schemes;

extern Prims_list__Parsers_NamedGroup_namedGroup *TLSInfo_default_groups;

void
TLSInfo_defaultTicketCBFun(
  FStar_Dyn_dyn uu____103,
  Prims_string sni,
  FStar_Bytes_bytes ticket,
  TLSConstants_ticketInfo info,
  FStar_Bytes_bytes psk
);

void **FStar_Dyn_mkdyn____();

extern TLSConstants_ticket_cb TLSInfo_defaultTicketCB;

TLSConstants_nego_action
TLSInfo_defaultServerNegoCBFun(
  FStar_Dyn_dyn uu____155,
  Parsers_ProtocolVersion_protocolVersion pv,
  FStar_Bytes_bytes cext,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes ocookie
);

extern TLSConstants_nego_cb TLSInfo_defaultServerNegoCB;

FStar_Pervasives_Native_option__K___uint64_t_Parsers_SignatureScheme_signatureScheme
TLSInfo_none6__FStar_Dyn_dyn_FStar_Dyn_dyn_Parsers_ProtocolVersion_protocolVersion_FStar_Bytes_bytes_FStar_Bytes_bytes_Prims_list_Parsers_SignatureScheme_signatureScheme_uint64_t___Parsers_SignatureScheme_signatureScheme(
  FStar_Dyn_dyn uu____239,
  FStar_Dyn_dyn uu____240,
  Parsers_ProtocolVersion_protocolVersion uu____241,
  FStar_Bytes_bytes uu____242,
  FStar_Bytes_bytes uu____243,
  Prims_list__Parsers_SignatureScheme_signatureScheme *uu____244
);

Prims_list__FStar_Bytes_bytes
*TLSInfo_empty3__FStar_Dyn_dyn_FStar_Dyn_dyn_uint64_t_FStar_Bytes_bytes(
  FStar_Dyn_dyn uu____285,
  FStar_Dyn_dyn uu____286,
  uint64_t uu____287
);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSInfo_none5__FStar_Dyn_dyn_FStar_Dyn_dyn_uint64_t_Parsers_SignatureScheme_signatureScheme_FStar_Bytes_bytes_FStar_Bytes_bytes(
  FStar_Dyn_dyn uu____350,
  FStar_Dyn_dyn uu____351,
  uint64_t uu____352,
  Parsers_SignatureScheme_signatureScheme uu____353,
  FStar_Bytes_bytes uu____354
);

bool
TLSInfo_false6__FStar_Dyn_dyn_FStar_Dyn_dyn_Prims_list_FStar_Bytes_bytes_Parsers_SignatureScheme_signatureScheme_FStar_Bytes_bytes_FStar_Bytes_bytes(
  FStar_Dyn_dyn uu____423,
  FStar_Dyn_dyn uu____424,
  Prims_list__FStar_Bytes_bytes *uu____425,
  Parsers_SignatureScheme_signatureScheme uu____426,
  FStar_Bytes_bytes uu____427,
  FStar_Bytes_bytes uu____428
);

extern TLSConstants_cert_cb TLSInfo_defaultCertCB;

extern TLSConstants_config TLSInfo_defaultConfig;

typedef FStar_Bytes_bytes TLSInfo_random;

typedef FStar_Bytes_bytes TLSInfo_crand;

typedef FStar_Bytes_bytes TLSInfo_srand;

typedef FStar_Bytes_bytes TLSInfo_csRands;

typedef FStar_Bytes_bytes TLSInfo_sessionHash;

typedef FStar_Bytes_bytes TLSInfo_sessionID;

typedef struct TLSInfo_sessionInfo_s
{
  FStar_Bytes_bytes init_crand;
  FStar_Bytes_bytes init_srand;
  Parsers_ProtocolVersion_protocolVersion protocol_version;
  CipherSuite_cipherSuite_ cipher_suite;
  Parsers_CompressionMethod_compressionMethod compression;
  bool extended_ms;
  PMS_pms pmsId;
  FStar_Bytes_bytes session_hash;
  bool client_auth;
  Prims_list__FStar_Bytes_bytes *clientID;
  Parsers_SignatureScheme_signatureScheme clientSigAlg;
  Prims_list__FStar_Bytes_bytes *serverID;
  Parsers_SignatureScheme_signatureScheme serverSigAlg;
  FStar_Bytes_bytes sessionID;
}
TLSInfo_sessionInfo;

FStar_Bytes_bytes
TLSInfo___proj__MksessionInfo__item__init_crand(TLSInfo_sessionInfo projectee);

FStar_Bytes_bytes
TLSInfo___proj__MksessionInfo__item__init_srand(TLSInfo_sessionInfo projectee);

Parsers_ProtocolVersion_protocolVersion
TLSInfo___proj__MksessionInfo__item__protocol_version(TLSInfo_sessionInfo projectee);

CipherSuite_cipherSuite_
TLSInfo___proj__MksessionInfo__item__cipher_suite(TLSInfo_sessionInfo projectee);

Parsers_CompressionMethod_compressionMethod
TLSInfo___proj__MksessionInfo__item__compression(TLSInfo_sessionInfo projectee);

bool TLSInfo___proj__MksessionInfo__item__extended_ms(TLSInfo_sessionInfo projectee);

PMS_pms TLSInfo___proj__MksessionInfo__item__pmsId(TLSInfo_sessionInfo projectee);

FStar_Bytes_bytes
TLSInfo___proj__MksessionInfo__item__session_hash(TLSInfo_sessionInfo projectee);

bool TLSInfo___proj__MksessionInfo__item__client_auth(TLSInfo_sessionInfo projectee);

Prims_list__FStar_Bytes_bytes
*TLSInfo___proj__MksessionInfo__item__clientID(TLSInfo_sessionInfo projectee);

Parsers_SignatureScheme_signatureScheme
TLSInfo___proj__MksessionInfo__item__clientSigAlg(TLSInfo_sessionInfo projectee);

Prims_list__FStar_Bytes_bytes
*TLSInfo___proj__MksessionInfo__item__serverID(TLSInfo_sessionInfo projectee);

Parsers_SignatureScheme_signatureScheme
TLSInfo___proj__MksessionInfo__item__serverSigAlg(TLSInfo_sessionInfo projectee);

FStar_Bytes_bytes
TLSInfo___proj__MksessionInfo__item__sessionID(TLSInfo_sessionInfo projectee);

typedef struct TLSInfo_abbrInfo_s
{
  FStar_Bytes_bytes abbr_crand;
  FStar_Bytes_bytes abbr_srand;
  FStar_Bytes_bytes abbr_session_hash;
  FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_FStar_Bytes_bytes abbr_vd;
}
TLSInfo_abbrInfo;

FStar_Bytes_bytes TLSInfo___proj__MkabbrInfo__item__abbr_crand(TLSInfo_abbrInfo projectee);

FStar_Bytes_bytes TLSInfo___proj__MkabbrInfo__item__abbr_srand(TLSInfo_abbrInfo projectee);

FStar_Bytes_bytes
TLSInfo___proj__MkabbrInfo__item__abbr_session_hash(TLSInfo_abbrInfo projectee);

FStar_Pervasives_Native_option__K___FStar_Bytes_bytes_FStar_Bytes_bytes
TLSInfo___proj__MkabbrInfo__item__abbr_vd(TLSInfo_abbrInfo projectee);

FStar_Bytes_bytes TLSInfo_csrands(TLSInfo_sessionInfo si);

TLSConstants_prePrfAlg
TLSInfo_kefAlg(
  Parsers_ProtocolVersion_protocolVersion pv,
  CipherSuite_cipherSuite_ cs,
  bool ems
);

TLSConstants_prePrfAlg
TLSInfo_kdfAlg(Parsers_ProtocolVersion_protocolVersion pv, CipherSuite_cipherSuite_ cs);

K___Parsers_ProtocolVersion_protocolVersion_CipherSuite_cipherSuite_
TLSInfo_vdAlg(TLSInfo_sessionInfo si);

CipherSuite_aeAlg TLSInfo_siAuthEncAlg(TLSInfo_sessionInfo si);

#define TLSInfo_StandardMS 0
#define TLSInfo_ExtendedMS 1

typedef uint8_t TLSInfo_msId_tags;

typedef struct TLSInfo_msId_s
{
  TLSInfo_msId_tags tag;
  union {
    struct 
    {
      PMS_pms _0;
      FStar_Bytes_bytes _1;
      TLSConstants_prePrfAlg _2;
    }
    case_StandardMS;
    struct 
    {
      PMS_pms _0;
      FStar_Bytes_bytes _1;
      TLSConstants_prePrfAlg _2;
    }
    case_ExtendedMS;
  }
  val;
}
TLSInfo_msId;

bool TLSInfo_uu___is_StandardMS(TLSInfo_msId projectee);

PMS_pms TLSInfo___proj__StandardMS__item___0(TLSInfo_msId projectee);

FStar_Bytes_bytes TLSInfo___proj__StandardMS__item___1(TLSInfo_msId projectee);

TLSConstants_prePrfAlg TLSInfo___proj__StandardMS__item___2(TLSInfo_msId projectee);

bool TLSInfo_uu___is_ExtendedMS(TLSInfo_msId projectee);

PMS_pms TLSInfo___proj__ExtendedMS__item___0(TLSInfo_msId projectee);

FStar_Bytes_bytes TLSInfo___proj__ExtendedMS__item___1(TLSInfo_msId projectee);

TLSConstants_prePrfAlg TLSInfo___proj__ExtendedMS__item___2(TLSInfo_msId projectee);

bool TLSInfo_honestMS(TLSInfo_msId uu___0_1486);

TLSInfo_msId TLSInfo_msid(TLSInfo_sessionInfo si);

bool TLSInfo_strongPRF(TLSInfo_sessionInfo si);

bool TLSInfo_strongHS(TLSInfo_sessionInfo si);

bool TLSInfo_safeCRE(TLSInfo_sessionInfo si);

bool TLSInfo_safeVD(TLSInfo_sessionInfo si);

extern bool TLSInfo_int_cma(Spec_Hash_Definitions_hash_alg uu____1557);

typedef struct TLSInfo_logInfo_CH_s
{
  FStar_Bytes_bytes li_ch_cr;
  Prims_list__FStar_Bytes_bytes *li_ch_psk;
}
TLSInfo_logInfo_CH;

FStar_Bytes_bytes TLSInfo___proj__MklogInfo_CH__item__li_ch_cr(TLSInfo_logInfo_CH projectee);

Prims_list__FStar_Bytes_bytes
*TLSInfo___proj__MklogInfo_CH__item__li_ch_psk(TLSInfo_logInfo_CH projectee);

typedef struct TLSInfo_logInfo_CH0_s
{
  FStar_Bytes_bytes li_ch0_cr;
  FStar_Bytes_bytes li_ch0_ed_psk;
  EverCrypt_aead_alg li_ch0_ed_ae;
  Spec_Hash_Definitions_hash_alg li_ch0_ed_hash;
}
TLSInfo_logInfo_CH0;

FStar_Bytes_bytes
TLSInfo___proj__MklogInfo_CH0__item__li_ch0_cr(TLSInfo_logInfo_CH0 projectee);

FStar_Bytes_bytes
TLSInfo___proj__MklogInfo_CH0__item__li_ch0_ed_psk(TLSInfo_logInfo_CH0 projectee);

EverCrypt_aead_alg
TLSInfo___proj__MklogInfo_CH0__item__li_ch0_ed_ae(TLSInfo_logInfo_CH0 projectee);

Spec_Hash_Definitions_hash_alg
TLSInfo___proj__MklogInfo_CH0__item__li_ch0_ed_hash(TLSInfo_logInfo_CH0 projectee);

typedef struct TLSInfo_logInfo_SH_s
{
  FStar_Bytes_bytes li_sh_cr;
  FStar_Bytes_bytes li_sh_sr;
  EverCrypt_aead_alg li_sh_ae;
  Spec_Hash_Definitions_hash_alg li_sh_hash;
  FStar_Pervasives_Native_option__FStar_Bytes_bytes li_sh_psk;
}
TLSInfo_logInfo_SH;

FStar_Bytes_bytes TLSInfo___proj__MklogInfo_SH__item__li_sh_cr(TLSInfo_logInfo_SH projectee);

FStar_Bytes_bytes TLSInfo___proj__MklogInfo_SH__item__li_sh_sr(TLSInfo_logInfo_SH projectee);

EverCrypt_aead_alg TLSInfo___proj__MklogInfo_SH__item__li_sh_ae(TLSInfo_logInfo_SH projectee);

Spec_Hash_Definitions_hash_alg
TLSInfo___proj__MklogInfo_SH__item__li_sh_hash(TLSInfo_logInfo_SH projectee);

FStar_Pervasives_Native_option__FStar_Bytes_bytes
TLSInfo___proj__MklogInfo_SH__item__li_sh_psk(TLSInfo_logInfo_SH projectee);

typedef struct TLSInfo_logInfo_SF_s
{
  TLSInfo_logInfo_SH li_sf_sh;
  FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes li_sf_certificate;
}
TLSInfo_logInfo_SF;

TLSInfo_logInfo_SH TLSInfo___proj__MklogInfo_SF__item__li_sf_sh(TLSInfo_logInfo_SF projectee);

FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes
TLSInfo___proj__MklogInfo_SF__item__li_sf_certificate(TLSInfo_logInfo_SF projectee);

typedef struct TLSInfo_logInfo_CF_s
{
  TLSInfo_logInfo_SF li_cf_sf;
  FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes li_cf_certificate;
}
TLSInfo_logInfo_CF;

TLSInfo_logInfo_SF TLSInfo___proj__MklogInfo_CF__item__li_cf_sf(TLSInfo_logInfo_CF projectee);

FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes
TLSInfo___proj__MklogInfo_CF__item__li_cf_certificate(TLSInfo_logInfo_CF projectee);

#define TLSInfo_LogInfo_CH 0
#define TLSInfo_LogInfo_CH0 1
#define TLSInfo_LogInfo_SH 2
#define TLSInfo_LogInfo_SF 3
#define TLSInfo_LogInfo_CF 4

typedef uint8_t TLSInfo_logInfo_tags;

typedef struct TLSInfo_logInfo_s
{
  TLSInfo_logInfo_tags tag;
  union {
    TLSInfo_logInfo_CH case_LogInfo_CH;
    TLSInfo_logInfo_CH0 case_LogInfo_CH0;
    TLSInfo_logInfo_SH case_LogInfo_SH;
    TLSInfo_logInfo_SF case_LogInfo_SF;
    TLSInfo_logInfo_CF case_LogInfo_CF;
  }
  val;
}
TLSInfo_logInfo;

bool TLSInfo_uu___is_LogInfo_CH(TLSInfo_logInfo projectee);

TLSInfo_logInfo_CH TLSInfo___proj__LogInfo_CH__item___0(TLSInfo_logInfo projectee);

bool TLSInfo_uu___is_LogInfo_CH0(TLSInfo_logInfo projectee);

TLSInfo_logInfo_CH0 TLSInfo___proj__LogInfo_CH0__item___0(TLSInfo_logInfo projectee);

bool TLSInfo_uu___is_LogInfo_SH(TLSInfo_logInfo projectee);

TLSInfo_logInfo_SH TLSInfo___proj__LogInfo_SH__item___0(TLSInfo_logInfo projectee);

bool TLSInfo_uu___is_LogInfo_SF(TLSInfo_logInfo projectee);

TLSInfo_logInfo_SF TLSInfo___proj__LogInfo_SF__item___0(TLSInfo_logInfo projectee);

bool TLSInfo_uu___is_LogInfo_CF(TLSInfo_logInfo projectee);

TLSInfo_logInfo_CF TLSInfo___proj__LogInfo_CF__item___0(TLSInfo_logInfo projectee);

EverCrypt_aead_alg TLSInfo_logInfo_ae(TLSInfo_logInfo uu___1_2437);

Spec_Hash_Definitions_hash_alg TLSInfo_logInfo_hash(TLSInfo_logInfo uu___2_2452);

FStar_Bytes_bytes TLSInfo_logInfo_nonce(TLSInfo_logInfo uu___3_2468);

bool
__eq__Prims_list__FStar_Bytes_bytes(
  Prims_list__FStar_Bytes_bytes *y,
  Prims_list__FStar_Bytes_bytes *x
);

bool __eq__TLSInfo_logInfo_CH(TLSInfo_logInfo_CH y, TLSInfo_logInfo_CH x);

bool __eq__TLSInfo_logInfo_CH0(TLSInfo_logInfo_CH0 y, TLSInfo_logInfo_CH0 x);

bool
__eq__FStar_Pervasives_Native_option__FStar_Bytes_bytes(
  FStar_Pervasives_Native_option__FStar_Bytes_bytes y,
  FStar_Pervasives_Native_option__FStar_Bytes_bytes x
);

bool __eq__TLSInfo_logInfo_SH(TLSInfo_logInfo_SH y, TLSInfo_logInfo_SH x);

bool
__eq__FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes(
  FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes y,
  FStar_Pervasives_Native_option__Prims_list__FStar_Bytes_bytes x
);

bool __eq__TLSInfo_logInfo_SF(TLSInfo_logInfo_SF y, TLSInfo_logInfo_SF x);

bool __eq__TLSInfo_logInfo_CF(TLSInfo_logInfo_CF y, TLSInfo_logInfo_CF x);

bool __eq__TLSInfo_logInfo(TLSInfo_logInfo y, TLSInfo_logInfo x);

bool TLSInfo_eq_logInfo(TLSInfo_logInfo la, TLSInfo_logInfo lb);

#define TLSInfo_ExtBinder 0
#define TLSInfo_ResBinder 1

typedef uint8_t TLSInfo_binderLabel;

bool TLSInfo_uu___is_ExtBinder(TLSInfo_binderLabel projectee);

bool TLSInfo_uu___is_ResBinder(TLSInfo_binderLabel projectee);

typedef struct TLSInfo_pre_rmsId_s TLSInfo_pre_rmsId;

#define TLSInfo_ApplicationPSK 0
#define TLSInfo_ResumptionPSK 1
#define TLSInfo_NoPSK 2

typedef uint8_t TLSInfo_pre_esId_tags;

typedef struct TLSInfo_pre_esId_s
{
  TLSInfo_pre_esId_tags tag;
  union {
    struct 
    {
      Spec_Hash_Definitions_hash_alg ha;
      EverCrypt_aead_alg ae;
      FStar_Bytes_bytes i;
    }
    case_ApplicationPSK;
    struct 
    {
      TLSInfo_logInfo li;
      TLSInfo_pre_rmsId *i;
    }
    case_ResumptionPSK;
    Spec_Hash_Definitions_hash_alg case_NoPSK;
  }
  val;
}
TLSInfo_pre_esId;

typedef struct TLSInfo_pre_saltId_s TLSInfo_pre_saltId;

typedef struct TLSInfo_pre_saltId_s TLSInfo_pre_saltId;

#define TLSInfo_HSID_PSK 0
#define TLSInfo_HSID_DHE 1

typedef uint8_t TLSInfo_pre_hsId_tags;

typedef struct TLSInfo_pre_hsId_s
{
  TLSInfo_pre_hsId_tags tag;
  union {
    TLSInfo_pre_saltId *case_HSID_PSK;
    struct 
    {
      TLSInfo_pre_saltId *_0;
      CommonDH_group_ g;
      CommonDH_pre_share_ si;
      CommonDH_pre_share_ sr;
    }
    case_HSID_DHE;
  }
  val;
}
TLSInfo_pre_hsId;

typedef struct TLSInfo_pre_asId_s TLSInfo_pre_asId;

#define TLSInfo_EarlySecretID 0
#define TLSInfo_HandshakeSecretID 1
#define TLSInfo_ApplicationSecretID 2

typedef uint8_t TLSInfo_pre_secretId_tags;

typedef struct TLSInfo_pre_secretId_s
{
  TLSInfo_pre_secretId_tags tag;
  union {
    TLSInfo_pre_esId *case_EarlySecretID;
    TLSInfo_pre_hsId *case_HandshakeSecretID;
    TLSInfo_pre_asId *case_ApplicationSecretID;
  }
  val;
}
TLSInfo_pre_secretId;

typedef struct TLSInfo_pre_saltId_s { TLSInfo_pre_secretId *_0; } TLSInfo_pre_saltId;

typedef struct TLSInfo_pre_asId_s { TLSInfo_pre_saltId *_0; } TLSInfo_pre_asId;

typedef struct TLSInfo_pre_rmsId_s
{
  TLSInfo_pre_asId *_0;
  FStar_Bytes_bytes _1;
}
TLSInfo_pre_rmsId;

typedef struct TLSInfo_pre_binderId_s
{
  TLSInfo_pre_esId *_0;
  TLSInfo_binderLabel _1;
}
TLSInfo_pre_binderId;

#define TLSInfo_EarlyExportID 0
#define TLSInfo_ExportID 1

typedef uint8_t TLSInfo_pre_exportId_tags;

typedef struct TLSInfo_pre_exportId_s
{
  TLSInfo_pre_exportId_tags tag;
  union {
    struct 
    {
      TLSInfo_pre_esId *_0;
      FStar_Bytes_bytes _1;
    }
    case_EarlyExportID;
    struct 
    {
      TLSInfo_pre_asId *_0;
      FStar_Bytes_bytes _1;
    }
    case_ExportID;
  }
  val;
}
TLSInfo_pre_exportId;

#define TLSInfo_ClientEarlyTrafficSecret 0
#define TLSInfo_ClientHandshakeTrafficSecret 1
#define TLSInfo_ServerHandshakeTrafficSecret 2
#define TLSInfo_ClientApplicationTrafficSecret 3
#define TLSInfo_ServerApplicationTrafficSecret 4
#define TLSInfo_ApplicationTrafficSecret 5

typedef uint8_t TLSInfo_expandTag;

typedef struct TLSInfo_pre_expandId_s
{
  TLSInfo_pre_secretId *_0;
  TLSInfo_expandTag *_1;
  FStar_Bytes_bytes _2;
}
TLSInfo_pre_expandId;

typedef struct TLSInfo_pre_keyId_s
{
  TLSInfo_logInfo li;
  TLSInfo_pre_expandId *i;
}
TLSInfo_pre_keyId;

typedef struct TLSInfo_pre_finishedId_s
{
  TLSInfo_logInfo li;
  TLSInfo_pre_expandId *_1;
}
TLSInfo_pre_finishedId;

bool TLSInfo_uu___is_ApplicationPSK(TLSInfo_pre_esId *projectee);

Spec_Hash_Definitions_hash_alg
TLSInfo___proj__ApplicationPSK__item__ha(TLSInfo_pre_esId *projectee);

EverCrypt_aead_alg TLSInfo___proj__ApplicationPSK__item__ae(TLSInfo_pre_esId *projectee);

FStar_Bytes_bytes TLSInfo___proj__ApplicationPSK__item__i(TLSInfo_pre_esId *projectee);

bool TLSInfo_uu___is_ResumptionPSK(TLSInfo_pre_esId *projectee);

TLSInfo_logInfo TLSInfo___proj__ResumptionPSK__item__li(TLSInfo_pre_esId *projectee);

TLSInfo_pre_rmsId *TLSInfo___proj__ResumptionPSK__item__i(TLSInfo_pre_esId *projectee);

bool TLSInfo_uu___is_NoPSK(TLSInfo_pre_esId *projectee);

Spec_Hash_Definitions_hash_alg TLSInfo___proj__NoPSK__item___0(TLSInfo_pre_esId *projectee);

bool TLSInfo_uu___is_Binder(TLSInfo_pre_binderId *projectee);

TLSInfo_pre_esId *TLSInfo___proj__Binder__item___0(TLSInfo_pre_binderId *projectee);

TLSInfo_binderLabel TLSInfo___proj__Binder__item___1(TLSInfo_pre_binderId *projectee);

bool TLSInfo_uu___is_HSID_PSK(TLSInfo_pre_hsId *projectee);

TLSInfo_pre_saltId *TLSInfo___proj__HSID_PSK__item___0(TLSInfo_pre_hsId *projectee);

bool TLSInfo_uu___is_HSID_DHE(TLSInfo_pre_hsId *projectee);

TLSInfo_pre_saltId *TLSInfo___proj__HSID_DHE__item___0(TLSInfo_pre_hsId *projectee);

CommonDH_group_ TLSInfo___proj__HSID_DHE__item__g(TLSInfo_pre_hsId *projectee);

CommonDH_pre_share_ TLSInfo___proj__HSID_DHE__item__si(TLSInfo_pre_hsId *projectee);

CommonDH_pre_share_ TLSInfo___proj__HSID_DHE__item__sr(TLSInfo_pre_hsId *projectee);

bool TLSInfo_uu___is_ASID(TLSInfo_pre_asId *projectee);

TLSInfo_pre_saltId *TLSInfo___proj__ASID__item___0(TLSInfo_pre_asId *projectee);

bool TLSInfo_uu___is_Salt(TLSInfo_pre_saltId *projectee);

TLSInfo_pre_secretId *TLSInfo___proj__Salt__item___0(TLSInfo_pre_saltId *projectee);

bool TLSInfo_uu___is_EarlySecretID(TLSInfo_pre_secretId *projectee);

TLSInfo_pre_esId *TLSInfo___proj__EarlySecretID__item___0(TLSInfo_pre_secretId *projectee);

bool TLSInfo_uu___is_HandshakeSecretID(TLSInfo_pre_secretId *projectee);

TLSInfo_pre_hsId *TLSInfo___proj__HandshakeSecretID__item___0(TLSInfo_pre_secretId *projectee);

bool TLSInfo_uu___is_ApplicationSecretID(TLSInfo_pre_secretId *projectee);

TLSInfo_pre_asId
*TLSInfo___proj__ApplicationSecretID__item___0(TLSInfo_pre_secretId *projectee);

bool TLSInfo_uu___is_RMSID(TLSInfo_logInfo li, TLSInfo_pre_rmsId *projectee);

TLSInfo_pre_asId
*TLSInfo___proj__RMSID__item___0(TLSInfo_logInfo li, TLSInfo_pre_rmsId *projectee);

FStar_Bytes_bytes
TLSInfo___proj__RMSID__item___1(TLSInfo_logInfo li, TLSInfo_pre_rmsId *projectee);

bool TLSInfo_uu___is_EarlyExportID(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

TLSInfo_pre_esId
*TLSInfo___proj__EarlyExportID__item___0(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

FStar_Bytes_bytes
TLSInfo___proj__EarlyExportID__item___1(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

bool TLSInfo_uu___is_ExportID(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

TLSInfo_pre_asId
*TLSInfo___proj__ExportID__item___0(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

FStar_Bytes_bytes
TLSInfo___proj__ExportID__item___1(TLSInfo_logInfo li, TLSInfo_pre_exportId *projectee);

bool TLSInfo_uu___is_ClientEarlyTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ClientHandshakeTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ServerHandshakeTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ClientApplicationTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ServerApplicationTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ApplicationTrafficSecret(TLSInfo_expandTag *projectee);

bool TLSInfo_uu___is_ExpandedSecret(TLSInfo_logInfo li, TLSInfo_pre_expandId *projectee);

TLSInfo_pre_secretId
*TLSInfo___proj__ExpandedSecret__item___0(TLSInfo_logInfo li, TLSInfo_pre_expandId *projectee);

TLSInfo_expandTag
*TLSInfo___proj__ExpandedSecret__item___1(TLSInfo_logInfo li, TLSInfo_pre_expandId *projectee);

FStar_Bytes_bytes
TLSInfo___proj__ExpandedSecret__item___2(TLSInfo_logInfo li, TLSInfo_pre_expandId *projectee);

bool TLSInfo_uu___is_KeyID(TLSInfo_pre_keyId *projectee);

TLSInfo_logInfo TLSInfo___proj__KeyID__item__li(TLSInfo_pre_keyId *projectee);

TLSInfo_pre_expandId *TLSInfo___proj__KeyID__item__i(TLSInfo_pre_keyId *projectee);

bool TLSInfo_uu___is_FinishedID(TLSInfo_pre_finishedId *projectee);

TLSInfo_logInfo TLSInfo___proj__FinishedID__item__li(TLSInfo_pre_finishedId *projectee);

TLSInfo_pre_expandId *TLSInfo___proj__FinishedID__item___1(TLSInfo_pre_finishedId *projectee);

Spec_Hash_Definitions_hash_alg TLSInfo_esId_hash(TLSInfo_pre_esId *uu___4_4154);

Spec_Hash_Definitions_hash_alg TLSInfo_binderId_hash(TLSInfo_pre_binderId *uu___5_4163);

Spec_Hash_Definitions_hash_alg TLSInfo_hsId_hash(TLSInfo_pre_hsId *uu___6_4166);

Spec_Hash_Definitions_hash_alg TLSInfo_asId_hash(TLSInfo_pre_asId *uu___7_4181);

Spec_Hash_Definitions_hash_alg TLSInfo_saltId_hash(TLSInfo_pre_saltId *uu___8_4183);

Spec_Hash_Definitions_hash_alg TLSInfo_secretId_hash(TLSInfo_pre_secretId *uu___9_4185);

Spec_Hash_Definitions_hash_alg TLSInfo_rmsId_hash(TLSInfo_logInfo li, TLSInfo_pre_rmsId *i1);

Spec_Hash_Definitions_hash_alg
TLSInfo_exportId_hash(TLSInfo_logInfo li, TLSInfo_pre_exportId *i1);

Spec_Hash_Definitions_hash_alg
TLSInfo_expandId_hash(TLSInfo_logInfo li, TLSInfo_pre_expandId *i1);

Spec_Hash_Definitions_hash_alg TLSInfo_keyId_hash(TLSInfo_pre_keyId *uu___10_4218);

Spec_Hash_Definitions_hash_alg TLSInfo_finishedId_hash(TLSInfo_pre_finishedId *uu___11_4223);

EverCrypt_aead_alg TLSInfo_esId_ae(TLSInfo_pre_esId *i1);

#define TLSInfo_I_ES 0
#define TLSInfo_I_BINDER 1
#define TLSInfo_I_HS 2
#define TLSInfo_I_AS 3
#define TLSInfo_I_SALT 4
#define TLSInfo_I_SECRET 5
#define TLSInfo_I_RMS 6
#define TLSInfo_I_EXPORT 7
#define TLSInfo_I_EXPAND 8
#define TLSInfo_I_KEY 9
#define TLSInfo_I_FINISHED 10

typedef uint8_t TLSInfo_pre_index_tags;

typedef struct TLSInfo_pre_index_s
{
  TLSInfo_pre_index_tags tag;
  union {
    TLSInfo_pre_esId *case_I_ES;
    TLSInfo_pre_binderId *case_I_BINDER;
    TLSInfo_pre_hsId *case_I_HS;
    TLSInfo_pre_asId *case_I_AS;
    TLSInfo_pre_saltId *case_I_SALT;
    TLSInfo_pre_secretId *case_I_SECRET;
    struct 
    {
      TLSInfo_logInfo li;
      TLSInfo_pre_rmsId *_1;
    }
    case_I_RMS;
    struct 
    {
      TLSInfo_logInfo li;
      TLSInfo_pre_exportId *_1;
    }
    case_I_EXPORT;
    struct 
    {
      TLSInfo_logInfo li;
      TLSInfo_pre_expandId *_1;
    }
    case_I_EXPAND;
    TLSInfo_pre_keyId *case_I_KEY;
    TLSInfo_pre_finishedId *case_I_FINISHED;
  }
  val;
}
TLSInfo_pre_index;

bool TLSInfo_uu___is_I_ES(TLSInfo_pre_index projectee);

TLSInfo_pre_esId *TLSInfo___proj__I_ES__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_BINDER(TLSInfo_pre_index projectee);

TLSInfo_pre_binderId *TLSInfo___proj__I_BINDER__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_HS(TLSInfo_pre_index projectee);

TLSInfo_pre_hsId *TLSInfo___proj__I_HS__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_AS(TLSInfo_pre_index projectee);

TLSInfo_pre_asId *TLSInfo___proj__I_AS__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_SALT(TLSInfo_pre_index projectee);

TLSInfo_pre_saltId *TLSInfo___proj__I_SALT__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_SECRET(TLSInfo_pre_index projectee);

TLSInfo_pre_secretId *TLSInfo___proj__I_SECRET__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_RMS(TLSInfo_pre_index projectee);

TLSInfo_logInfo TLSInfo___proj__I_RMS__item__li(TLSInfo_pre_index projectee);

TLSInfo_pre_rmsId *TLSInfo___proj__I_RMS__item___1(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_EXPORT(TLSInfo_pre_index projectee);

TLSInfo_logInfo TLSInfo___proj__I_EXPORT__item__li(TLSInfo_pre_index projectee);

TLSInfo_pre_exportId *TLSInfo___proj__I_EXPORT__item___1(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_EXPAND(TLSInfo_pre_index projectee);

TLSInfo_logInfo TLSInfo___proj__I_EXPAND__item__li(TLSInfo_pre_index projectee);

TLSInfo_pre_expandId *TLSInfo___proj__I_EXPAND__item___1(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_KEY(TLSInfo_pre_index projectee);

TLSInfo_pre_keyId *TLSInfo___proj__I_KEY__item___0(TLSInfo_pre_index projectee);

bool TLSInfo_uu___is_I_FINISHED(TLSInfo_pre_index projectee);

TLSInfo_pre_finishedId *TLSInfo___proj__I_FINISHED__item___0(TLSInfo_pre_index projectee);

extern void *TLSInfo_safety_table;

typedef TLSInfo_pre_index TLSInfo_index;

typedef TLSInfo_pre_esId *TLSInfo_esId;

typedef TLSInfo_pre_saltId *TLSInfo_saltId;

typedef TLSInfo_pre_secretId *TLSInfo_secretId;

typedef TLSInfo_pre_keyId *TLSInfo_keyId;

#define TLSInfo_PlaintextID 0
#define TLSInfo_ID13 1
#define TLSInfo_ID12 2

typedef uint8_t TLSInfo_id_tags;

typedef struct TLSInfo_id_s
{
  TLSInfo_id_tags tag;
  union {
    FStar_Bytes_bytes case_PlaintextID;
    TLSInfo_pre_keyId *case_ID13;
    struct 
    {
      Parsers_ProtocolVersion_protocolVersion pv;
      TLSInfo_msId msId;
      TLSConstants_prePrfAlg kdfAlg;
      CipherSuite_aeAlg aeAlg;
      FStar_Bytes_bytes cr;
      FStar_Bytes_bytes sr;
      TLSConstants_role writer;
    }
    case_ID12;
  }
  val;
}
TLSInfo_id;

bool TLSInfo_uu___is_PlaintextID(TLSInfo_id projectee);

FStar_Bytes_bytes TLSInfo___proj__PlaintextID__item__our_rand(TLSInfo_id projectee);

bool TLSInfo_uu___is_ID13(TLSInfo_id projectee);

TLSInfo_pre_keyId *TLSInfo___proj__ID13__item__keyId(TLSInfo_id projectee);

bool TLSInfo_uu___is_ID12(TLSInfo_id projectee);

Parsers_ProtocolVersion_protocolVersion TLSInfo___proj__ID12__item__pv(TLSInfo_id projectee);

TLSInfo_msId TLSInfo___proj__ID12__item__msId(TLSInfo_id projectee);

TLSConstants_prePrfAlg TLSInfo___proj__ID12__item__kdfAlg(TLSInfo_id projectee);

CipherSuite_aeAlg TLSInfo___proj__ID12__item__aeAlg(TLSInfo_id projectee);

FStar_Bytes_bytes TLSInfo___proj__ID12__item__cr(TLSInfo_id projectee);

FStar_Bytes_bytes TLSInfo___proj__ID12__item__sr(TLSInfo_id projectee);

TLSConstants_role TLSInfo___proj__ID12__item__writer(TLSInfo_id projectee);

TLSInfo_expandTag *TLSInfo_peerLabel(TLSInfo_expandTag *uu___12_5194);

TLSInfo_id TLSInfo_peerId(TLSInfo_id uu___13_5214);

TLSInfo_id TLSInfo_siId(TLSInfo_sessionInfo si, TLSConstants_role r);

Parsers_ProtocolVersion_protocolVersion TLSInfo_pv_of_id(TLSInfo_id i1);

bool __eq__TLSConstants_role(TLSConstants_role y, TLSConstants_role x);

FStar_Bytes_bytes TLSInfo_nonce_of_id(TLSInfo_id i1);

TLSConstants_prePrfAlg TLSInfo_kdfAlg_of_id(TLSInfo_id uu___14_5329);

Spec_Hash_Definitions_hash_alg TLSInfo_macAlg_of_id(TLSInfo_id uu___15_5350);

K___CipherSuite_encAlg_CipherSuite_ivMode TLSInfo_encAlg_of_id(TLSInfo_id uu___16_5375);

CipherSuite_aeAlg TLSInfo_aeAlg_of_id(TLSInfo_id uu___17_5398);

Prims_string TLSInfo_sinfo_to_string(TLSInfo_sessionInfo si);

bool TLSInfo_safeId(TLSInfo_id i1);

bool TLSInfo_authId(TLSInfo_id i1);

#define __TLSInfo_H_DEFINED
#endif
